
WiFi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800100  000014f0  00001584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  00800292  00800292  00001716  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001734  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a87  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a38  00000000  00000000  00003a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  000044b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e1  00000000  00000000  0000483c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d42  00000000  00000000  0000511d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005e5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ef       	ldi	r30, 0xF0	; 240
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 39       	cpi	r26, 0x92	; 146
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a2 e9       	ldi	r26, 0x92	; 146
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 33       	cpi	r26, 0x3B	; 59
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 28 04 	call	0x850	; 0x850 <main>
      9e:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Read_Response>:
}

bool ESP8266_Close()
{
	return SendATandExpectResponse("AT+CIPCLOSE=1", "\r\nOK\r\n");
}
      a6:	2f 92       	push	r2
      a8:	3f 92       	push	r3
      aa:	4f 92       	push	r4
      ac:	5f 92       	push	r5
      ae:	6f 92       	push	r6
      b0:	7f 92       	push	r7
      b2:	8f 92       	push	r8
      b4:	9f 92       	push	r9
      b6:	af 92       	push	r10
      b8:	bf 92       	push	r11
      ba:	cf 92       	push	r12
      bc:	df 92       	push	r13
      be:	ef 92       	push	r14
      c0:	ff 92       	push	r15
      c2:	0f 93       	push	r16
      c4:	1f 93       	push	r17
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
      ce:	2c 97       	sbiw	r28, 0x0c	; 12
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	f8 94       	cli
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	0f be       	out	0x3f, r0	; 63
      d8:	cd bf       	out	0x3d, r28	; 61
      da:	9e 83       	std	Y+6, r25	; 0x06
      dc:	8d 83       	std	Y+5, r24	; 0x05
      de:	2d b7       	in	r18, 0x3d	; 61
      e0:	3e b7       	in	r19, 0x3e	; 62
      e2:	3c 87       	std	Y+12, r19	; 0x0c
      e4:	2b 87       	std	Y+11, r18	; 0x0b
      e6:	fc 01       	movw	r30, r24
      e8:	01 90       	ld	r0, Z+
      ea:	00 20       	and	r0, r0
      ec:	e9 f7       	brne	.-6      	; 0xe8 <Read_Response+0x42>
      ee:	31 97       	sbiw	r30, 0x01	; 1
      f0:	5f 01       	movw	r10, r30
      f2:	a8 1a       	sub	r10, r24
      f4:	b9 0a       	sbc	r11, r25
      f6:	bb 24       	eor	r11, r11
      f8:	a5 01       	movw	r20, r10
      fa:	41 50       	subi	r20, 0x01	; 1
      fc:	51 09       	sbc	r21, r1
      fe:	58 87       	std	Y+8, r21	; 0x08
     100:	4f 83       	std	Y+7, r20	; 0x07
     102:	8d b7       	in	r24, 0x3d	; 61
     104:	9e b7       	in	r25, 0x3e	; 62
     106:	8a 19       	sub	r24, r10
     108:	9b 09       	sbc	r25, r11
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	f8 94       	cli
     10e:	9e bf       	out	0x3e, r25	; 62
     110:	0f be       	out	0x3f, r0	; 63
     112:	8d bf       	out	0x3d, r24	; 61
     114:	ad b7       	in	r26, 0x3d	; 61
     116:	be b7       	in	r27, 0x3e	; 62
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	4d 01       	movw	r8, r26
     11c:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     120:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x1>
     124:	a0 91 94 02 	lds	r26, 0x0294	; 0x800294 <__data_end+0x2>
     128:	b0 91 95 02 	lds	r27, 0x0295	; 0x800295 <__data_end+0x3>
     12c:	80 3f       	cpi	r24, 0xF0	; 240
     12e:	98 4d       	sbci	r25, 0xD8	; 216
     130:	af 4f       	sbci	r26, 0xFF	; 255
     132:	bf 4f       	sbci	r27, 0xFF	; 255
     134:	61 f4       	brne	.+24     	; 0x14e <Read_Response+0xa8>
     136:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <__data_end>
     13a:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <__data_end+0x1>
     13e:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <__data_end+0x2>
     142:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <__data_end+0x3>
     146:	82 e0       	ldi	r24, 0x02	; 2
     148:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <Response_Status>
     14c:	9b c0       	rjmp	.+310    	; 0x284 <Read_Response+0x1de>
     14e:	19 82       	std	Y+1, r1	; 0x01
     150:	1a 82       	std	Y+2, r1	; 0x02
     152:	1b 82       	std	Y+3, r1	; 0x03
     154:	1c 82       	std	Y+4, r1	; 0x04
     156:	2f 80       	ldd	r2, Y+7	; 0x07
     158:	38 84       	ldd	r3, Y+8	; 0x08
     15a:	28 0c       	add	r2, r8
     15c:	39 1c       	adc	r3, r9
     15e:	94 01       	movw	r18, r8
     160:	2f 5f       	subi	r18, 0xFF	; 255
     162:	3f 4f       	sbci	r19, 0xFF	; 255
     164:	3a 87       	std	Y+10, r19	; 0x0a
     166:	29 87       	std	Y+9, r18	; 0x09
     168:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <Response_Status>
     16c:	84 30       	cpi	r24, 0x04	; 4
     16e:	11 f4       	brne	.+4      	; 0x174 <Read_Response+0xce>
     170:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <Response_Status>
     174:	ea e9       	ldi	r30, 0x9A	; 154
     176:	f2 e0       	ldi	r31, 0x02	; 2
     178:	01 90       	ld	r0, Z+
     17a:	00 20       	and	r0, r0
     17c:	e9 f7       	brne	.-6      	; 0x178 <Read_Response+0xd2>
     17e:	31 97       	sbiw	r30, 0x01	; 1
     180:	cf 01       	movw	r24, r30
     182:	8a 59       	subi	r24, 0x9A	; 154
     184:	92 40       	sbci	r25, 0x02	; 2
     186:	6c 01       	movw	r12, r24
     188:	e1 2c       	mov	r14, r1
     18a:	f1 2c       	mov	r15, r1
     18c:	c1 14       	cp	r12, r1
     18e:	d1 04       	cpc	r13, r1
     190:	e1 04       	cpc	r14, r1
     192:	f1 04       	cpc	r15, r1
     194:	09 f4       	brne	.+2      	; 0x198 <Read_Response+0xf2>
     196:	51 c0       	rjmp	.+162    	; 0x23a <Read_Response+0x194>
     198:	89 ef       	ldi	r24, 0xF9	; 249
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	f1 f7       	brne	.-4      	; 0x19c <Read_Response+0xf6>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <Read_Response+0xfc>
     1a2:	00 00       	nop
     1a4:	29 81       	ldd	r18, Y+1	; 0x01
     1a6:	3a 81       	ldd	r19, Y+2	; 0x02
     1a8:	4b 81       	ldd	r20, Y+3	; 0x03
     1aa:	5c 81       	ldd	r21, Y+4	; 0x04
     1ac:	2f 5f       	subi	r18, 0xFF	; 255
     1ae:	3f 4f       	sbci	r19, 0xFF	; 255
     1b0:	4f 4f       	sbci	r20, 0xFF	; 255
     1b2:	5f 4f       	sbci	r21, 0xFF	; 255
     1b4:	29 83       	std	Y+1, r18	; 0x01
     1b6:	3a 83       	std	Y+2, r19	; 0x02
     1b8:	4b 83       	std	Y+3, r20	; 0x03
     1ba:	5c 83       	std	Y+4, r21	; 0x04
     1bc:	ea e9       	ldi	r30, 0x9A	; 154
     1be:	f2 e0       	ldi	r31, 0x02	; 2
     1c0:	01 90       	ld	r0, Z+
     1c2:	00 20       	and	r0, r0
     1c4:	e9 f7       	brne	.-6      	; 0x1c0 <Read_Response+0x11a>
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	cf 01       	movw	r24, r30
     1ca:	8a 59       	subi	r24, 0x9A	; 154
     1cc:	92 40       	sbci	r25, 0x02	; 2
     1ce:	a0 e0       	ldi	r26, 0x00	; 0
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	c8 16       	cp	r12, r24
     1d4:	d9 06       	cpc	r13, r25
     1d6:	ea 06       	cpc	r14, r26
     1d8:	fb 06       	cpc	r15, r27
     1da:	79 f5       	brne	.+94     	; 0x23a <Read_Response+0x194>
     1dc:	0a e9       	ldi	r16, 0x9A	; 154
     1de:	12 e0       	ldi	r17, 0x02	; 2
     1e0:	41 2c       	mov	r4, r1
     1e2:	51 2c       	mov	r5, r1
     1e4:	32 01       	movw	r6, r4
     1e6:	4f 81       	ldd	r20, Y+7	; 0x07
     1e8:	58 85       	ldd	r21, Y+8	; 0x08
     1ea:	69 85       	ldd	r22, Y+9	; 0x09
     1ec:	7a 85       	ldd	r23, Y+10	; 0x0a
     1ee:	c4 01       	movw	r24, r8
     1f0:	0e 94 52 07 	call	0xea4	; 0xea4 <memmove>
     1f4:	d8 01       	movw	r26, r16
     1f6:	8d 91       	ld	r24, X+
     1f8:	8d 01       	movw	r16, r26
     1fa:	f1 01       	movw	r30, r2
     1fc:	80 83       	st	Z, r24
     1fe:	a5 01       	movw	r20, r10
     200:	6d 81       	ldd	r22, Y+5	; 0x05
     202:	7e 81       	ldd	r23, Y+6	; 0x06
     204:	c4 01       	movw	r24, r8
     206:	0e 94 64 07 	call	0xec8	; 0xec8 <strncmp>
     20a:	89 2b       	or	r24, r25
     20c:	61 f4       	brne	.+24     	; 0x226 <Read_Response+0x180>
     20e:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <__data_end>
     212:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <__data_end+0x1>
     216:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <__data_end+0x2>
     21a:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <__data_end+0x3>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <Response_Status>
     224:	2f c0       	rjmp	.+94     	; 0x284 <Read_Response+0x1de>
     226:	ff ef       	ldi	r31, 0xFF	; 255
     228:	4f 1a       	sub	r4, r31
     22a:	5f 0a       	sbc	r5, r31
     22c:	6f 0a       	sbc	r6, r31
     22e:	7f 0a       	sbc	r7, r31
     230:	4c 14       	cp	r4, r12
     232:	5d 04       	cpc	r5, r13
     234:	6e 04       	cpc	r6, r14
     236:	7f 04       	cpc	r7, r15
     238:	b1 f6       	brne	.-84     	; 0x1e6 <Read_Response+0x140>
     23a:	89 ef       	ldi	r24, 0xF9	; 249
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <Read_Response+0x198>
     242:	00 c0       	rjmp	.+0      	; 0x244 <Read_Response+0x19e>
     244:	00 00       	nop
     246:	29 81       	ldd	r18, Y+1	; 0x01
     248:	3a 81       	ldd	r19, Y+2	; 0x02
     24a:	4b 81       	ldd	r20, Y+3	; 0x03
     24c:	5c 81       	ldd	r21, Y+4	; 0x04
     24e:	2f 5f       	subi	r18, 0xFF	; 255
     250:	3f 4f       	sbci	r19, 0xFF	; 255
     252:	4f 4f       	sbci	r20, 0xFF	; 255
     254:	5f 4f       	sbci	r21, 0xFF	; 255
     256:	29 83       	std	Y+1, r18	; 0x01
     258:	3a 83       	std	Y+2, r19	; 0x02
     25a:	4b 83       	std	Y+3, r20	; 0x03
     25c:	5c 83       	std	Y+4, r21	; 0x04
     25e:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end>
     262:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x1>
     266:	a0 91 94 02 	lds	r26, 0x0294	; 0x800294 <__data_end+0x2>
     26a:	b0 91 95 02 	lds	r27, 0x0295	; 0x800295 <__data_end+0x3>
     26e:	80 5f       	subi	r24, 0xF0	; 240
     270:	98 4d       	sbci	r25, 0xD8	; 216
     272:	af 4f       	sbci	r26, 0xFF	; 255
     274:	bf 4f       	sbci	r27, 0xFF	; 255
     276:	28 17       	cp	r18, r24
     278:	39 07       	cpc	r19, r25
     27a:	4a 07       	cpc	r20, r26
     27c:	5b 07       	cpc	r21, r27
     27e:	08 f4       	brcc	.+2      	; 0x282 <Read_Response+0x1dc>
     280:	73 cf       	rjmp	.-282    	; 0x168 <Read_Response+0xc2>
     282:	59 cf       	rjmp	.-334    	; 0x136 <Read_Response+0x90>
     284:	4b 85       	ldd	r20, Y+11	; 0x0b
     286:	5c 85       	ldd	r21, Y+12	; 0x0c
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	5e bf       	out	0x3e, r21	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	4d bf       	out	0x3d, r20	; 61
     292:	2c 96       	adiw	r28, 0x0c	; 12
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	ff 90       	pop	r15
     2a8:	ef 90       	pop	r14
     2aa:	df 90       	pop	r13
     2ac:	cf 90       	pop	r12
     2ae:	bf 90       	pop	r11
     2b0:	af 90       	pop	r10
     2b2:	9f 90       	pop	r9
     2b4:	8f 90       	pop	r8
     2b6:	7f 90       	pop	r7
     2b8:	6f 90       	pop	r6
     2ba:	5f 90       	pop	r5
     2bc:	4f 90       	pop	r4
     2be:	3f 90       	pop	r3
     2c0:	2f 90       	pop	r2
     2c2:	08 95       	ret

000002c4 <ESP8266_Clear>:
     2c4:	80 ea       	ldi	r24, 0xA0	; 160
     2c6:	ea e9       	ldi	r30, 0x9A	; 154
     2c8:	f2 e0       	ldi	r31, 0x02	; 2
     2ca:	df 01       	movw	r26, r30
     2cc:	1d 92       	st	X+, r1
     2ce:	8a 95       	dec	r24
     2d0:	e9 f7       	brne	.-6      	; 0x2cc <ESP8266_Clear+0x8>
     2d2:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <Counter+0x1>
     2d6:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <Counter>
     2da:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <pointer+0x1>
     2de:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <pointer>
     2e2:	08 95       	ret

000002e4 <Start_Read_Response>:
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	ec 01       	movw	r28, r24
     2ea:	84 e0       	ldi	r24, 0x04	; 4
     2ec:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <Response_Status>
     2f0:	ce 01       	movw	r24, r28
     2f2:	0e 94 53 00 	call	0xa6	; 0xa6 <Read_Response>
     2f6:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <Response_Status>
     2fa:	88 23       	and	r24, r24
     2fc:	c9 f3       	breq	.-14     	; 0x2f0 <Start_Read_Response+0xc>
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <WaitForExpectedResponse>:
     304:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Start_Read_Response>
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 91 3a 03 	lds	r25, 0x033A	; 0x80033a <Response_Status>
     30e:	92 30       	cpi	r25, 0x02	; 2
     310:	09 f4       	brne	.+2      	; 0x314 <WaitForExpectedResponse+0x10>
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	08 95       	ret

00000316 <SendATandExpectResponse>:
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	8c 01       	movw	r16, r24
     320:	eb 01       	movw	r28, r22
     322:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ESP8266_Clear>
     326:	c8 01       	movw	r24, r16
     328:	0e 94 dd 04 	call	0x9ba	; 0x9ba <USART_SendString>
     32c:	88 e6       	ldi	r24, 0x68	; 104
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 dd 04 	call	0x9ba	; 0x9ba <USART_SendString>
     334:	ce 01       	movw	r24, r28
     336:	0e 94 82 01 	call	0x304	; 0x304 <WaitForExpectedResponse>
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	08 95       	ret

00000344 <ESP8266_ApplicationMode>:
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	64 97       	sbiw	r28, 0x14	; 20
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	8e 01       	movw	r16, r28
     35e:	0f 5f       	subi	r16, 0xFF	; 255
     360:	1f 4f       	sbci	r17, 0xFF	; 255
     362:	94 e1       	ldi	r25, 0x14	; 20
     364:	f8 01       	movw	r30, r16
     366:	11 92       	st	Z+, r1
     368:	9a 95       	dec	r25
     36a:	e9 f7       	brne	.-6      	; 0x366 <ESP8266_ApplicationMode+0x22>
     36c:	1f 92       	push	r1
     36e:	8f 93       	push	r24
     370:	87 e0       	ldi	r24, 0x07	; 7
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	9f 93       	push	r25
     376:	8f 93       	push	r24
     378:	1f 93       	push	r17
     37a:	0f 93       	push	r16
     37c:	0e 94 8c 07 	call	0xf18	; 0xf18 <sprintf>
     380:	1c 8a       	std	Y+20, r1	; 0x14
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	71 e0       	ldi	r23, 0x01	; 1
     386:	c8 01       	movw	r24, r16
     388:	0e 94 8b 01 	call	0x316	; 0x316 <SendATandExpectResponse>
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	64 96       	adiw	r28, 0x14	; 20
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <ESP8266_ConnectionMode>:
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	64 97       	sbiw	r28, 0x14	; 20
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	8e 01       	movw	r16, r28
     3c8:	0f 5f       	subi	r16, 0xFF	; 255
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	94 e1       	ldi	r25, 0x14	; 20
     3ce:	f8 01       	movw	r30, r16
     3d0:	11 92       	st	Z+, r1
     3d2:	9a 95       	dec	r25
     3d4:	e9 f7       	brne	.-6      	; 0x3d0 <ESP8266_ConnectionMode+0x22>
     3d6:	1f 92       	push	r1
     3d8:	8f 93       	push	r24
     3da:	85 e1       	ldi	r24, 0x15	; 21
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	1f 93       	push	r17
     3e4:	0f 93       	push	r16
     3e6:	0e 94 8c 07 	call	0xf18	; 0xf18 <sprintf>
     3ea:	1c 8a       	std	Y+20, r1	; 0x14
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	71 e0       	ldi	r23, 0x01	; 1
     3f0:	c8 01       	movw	r24, r16
     3f2:	0e 94 8b 01 	call	0x316	; 0x316 <SendATandExpectResponse>
     3f6:	0f 90       	pop	r0
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	64 96       	adiw	r28, 0x14	; 20
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	08 95       	ret

00000418 <ESP8266_Begin>:
     418:	cf 93       	push	r28
     41a:	c5 e0       	ldi	r28, 0x05	; 5
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	71 e0       	ldi	r23, 0x01	; 1
     420:	82 e2       	ldi	r24, 0x22	; 34
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 8b 01 	call	0x316	; 0x316 <SendATandExpectResponse>
     428:	81 11       	cpse	r24, r1
     42a:	0a c0       	rjmp	.+20     	; 0x440 <ESP8266_Begin+0x28>
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	71 e0       	ldi	r23, 0x01	; 1
     430:	87 e2       	ldi	r24, 0x27	; 39
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 8b 01 	call	0x316	; 0x316 <SendATandExpectResponse>
     438:	81 11       	cpse	r24, r1
     43a:	02 c0       	rjmp	.+4      	; 0x440 <ESP8266_Begin+0x28>
     43c:	c1 50       	subi	r28, 0x01	; 1
     43e:	71 f7       	brne	.-36     	; 0x41c <ESP8266_Begin+0x4>
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <ESP8266_WIFIMode>:

bool ESP8266_WIFIMode(uint8_t _mode)
{
     444:	0f 93       	push	r16
     446:	1f 93       	push	r17
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	64 97       	sbiw	r28, 0x14	; 20
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     45c:	8e 01       	movw	r16, r28
     45e:	0f 5f       	subi	r16, 0xFF	; 255
     460:	1f 4f       	sbci	r17, 0xFF	; 255
     462:	94 e1       	ldi	r25, 0x14	; 20
     464:	f8 01       	movw	r30, r16
     466:	11 92       	st	Z+, r1
     468:	9a 95       	dec	r25
     46a:	e9 f7       	brne	.-6      	; 0x466 <ESP8266_WIFIMode+0x22>
	sprintf(_atCommand, "AT+CWMODE=%d", _mode);
     46c:	1f 92       	push	r1
     46e:	8f 93       	push	r24
     470:	88 e3       	ldi	r24, 0x38	; 56
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	9f 93       	push	r25
     476:	8f 93       	push	r24
     478:	1f 93       	push	r17
     47a:	0f 93       	push	r16
     47c:	0e 94 8c 07 	call	0xf18	; 0xf18 <sprintf>
	_atCommand[19] = 0;
     480:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	71 e0       	ldi	r23, 0x01	; 1
     486:	c8 01       	movw	r24, r16
     488:	0e 94 8b 01 	call	0x316	; 0x316 <SendATandExpectResponse>
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
}
     498:	64 96       	adiw	r28, 0x14	; 20
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	08 95       	ret

000004ae <ESP8266_JoinAccessPoint>:

uint8_t ESP8266_JoinAccessPoint(char* _SSID, char* _PASSWORD)
{
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	ec 97       	sbiw	r28, 0x3c	; 60
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[60];
	memset(_atCommand, 0, 60);
     4c6:	8e 01       	movw	r16, r28
     4c8:	0f 5f       	subi	r16, 0xFF	; 255
     4ca:	1f 4f       	sbci	r17, 0xFF	; 255
     4cc:	2c e3       	ldi	r18, 0x3C	; 60
     4ce:	f8 01       	movw	r30, r16
     4d0:	11 92       	st	Z+, r1
     4d2:	2a 95       	dec	r18
     4d4:	e9 f7       	brne	.-6      	; 0x4d0 <ESP8266_JoinAccessPoint+0x22>
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD);
     4d6:	7f 93       	push	r23
     4d8:	6f 93       	push	r22
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	85 e4       	ldi	r24, 0x45	; 69
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	9f 93       	push	r25
     4e4:	8f 93       	push	r24
     4e6:	1f 93       	push	r17
     4e8:	0f 93       	push	r16
     4ea:	0e 94 8c 07 	call	0xf18	; 0xf18 <sprintf>
	_atCommand[59] = 0;
     4ee:	1c ae       	std	Y+60, r1	; 0x3c
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
     4f0:	68 e5       	ldi	r22, 0x58	; 88
     4f2:	71 e0       	ldi	r23, 0x01	; 1
     4f4:	c8 01       	movw	r24, r16
     4f6:	0e 94 8b 01 	call	0x316	; 0x316 <SendATandExpectResponse>
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	81 11       	cpse	r24, r1
     506:	22 c0       	rjmp	.+68     	; 0x54c <ESP8266_JoinAccessPoint+0x9e>
	return ESP8266_WIFI_CONNECTED;
	else{
		if(strstr(RESPONSE_BUFFER, "+CWJAP:1"))
     508:	6b e6       	ldi	r22, 0x6B	; 107
     50a:	71 e0       	ldi	r23, 0x01	; 1
     50c:	8a e9       	ldi	r24, 0x9A	; 154
     50e:	92 e0       	ldi	r25, 0x02	; 2
     510:	0e 94 72 07 	call	0xee4	; 0xee4 <strstr>
     514:	89 2b       	or	r24, r25
     516:	e1 f4       	brne	.+56     	; 0x550 <ESP8266_JoinAccessPoint+0xa2>
		return ESP8266_CONNECTION_TIMEOUT;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:2"))
     518:	64 e7       	ldi	r22, 0x74	; 116
     51a:	71 e0       	ldi	r23, 0x01	; 1
     51c:	8a e9       	ldi	r24, 0x9A	; 154
     51e:	92 e0       	ldi	r25, 0x02	; 2
     520:	0e 94 72 07 	call	0xee4	; 0xee4 <strstr>
     524:	89 2b       	or	r24, r25
     526:	b1 f4       	brne	.+44     	; 0x554 <ESP8266_JoinAccessPoint+0xa6>
		return ESP8266_WRONG_PASSWORD;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:3"))
     528:	6d e7       	ldi	r22, 0x7D	; 125
     52a:	71 e0       	ldi	r23, 0x01	; 1
     52c:	8a e9       	ldi	r24, 0x9A	; 154
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	0e 94 72 07 	call	0xee4	; 0xee4 <strstr>
     534:	89 2b       	or	r24, r25
     536:	81 f4       	brne	.+32     	; 0x558 <ESP8266_JoinAccessPoint+0xaa>
		return ESP8266_NOT_FOUND_TARGET_AP;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:4"))
     538:	66 e8       	ldi	r22, 0x86	; 134
     53a:	71 e0       	ldi	r23, 0x01	; 1
     53c:	8a e9       	ldi	r24, 0x9A	; 154
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	0e 94 72 07 	call	0xee4	; 0xee4 <strstr>
     544:	89 2b       	or	r24, r25
     546:	51 f4       	brne	.+20     	; 0x55c <ESP8266_JoinAccessPoint+0xae>
		return ESP8266_CONNECTION_FAILED;
		else
		return ESP8266_JOIN_UNKNOWN_ERROR;
     548:	85 e0       	ldi	r24, 0x05	; 5
     54a:	09 c0       	rjmp	.+18     	; 0x55e <ESP8266_JoinAccessPoint+0xb0>
	char _atCommand[60];
	memset(_atCommand, 0, 60);
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD);
	_atCommand[59] = 0;
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
	return ESP8266_WIFI_CONNECTED;
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	07 c0       	rjmp	.+14     	; 0x55e <ESP8266_JoinAccessPoint+0xb0>
	else{
		if(strstr(RESPONSE_BUFFER, "+CWJAP:1"))
		return ESP8266_CONNECTION_TIMEOUT;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	05 c0       	rjmp	.+10     	; 0x55e <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:2"))
		return ESP8266_WRONG_PASSWORD;
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	03 c0       	rjmp	.+6      	; 0x55e <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:3"))
		return ESP8266_NOT_FOUND_TARGET_AP;
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	01 c0       	rjmp	.+2      	; 0x55e <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:4"))
		return ESP8266_CONNECTION_FAILED;
     55c:	84 e0       	ldi	r24, 0x04	; 4
		else
		return ESP8266_JOIN_UNKNOWN_ERROR;
	}
}
     55e:	ec 96       	adiw	r28, 0x3c	; 60
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	08 95       	ret

00000574 <ESP8266_connected>:

uint8_t ESP8266_connected()
{
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n");
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	71 e0       	ldi	r23, 0x01	; 1
     578:	8f e8       	ldi	r24, 0x8F	; 143
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 8b 01 	call	0x316	; 0x316 <SendATandExpectResponse>
	if(strstr(RESPONSE_BUFFER, "STATUS:2"))
     580:	6c e9       	ldi	r22, 0x9C	; 156
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	8a e9       	ldi	r24, 0x9A	; 154
     586:	92 e0       	ldi	r25, 0x02	; 2
     588:	0e 94 72 07 	call	0xee4	; 0xee4 <strstr>
     58c:	89 2b       	or	r24, r25
     58e:	d1 f4       	brne	.+52     	; 0x5c4 <ESP8266_connected+0x50>
	return ESP8266_CONNECTED_TO_AP;
	else if(strstr(RESPONSE_BUFFER, "STATUS:3"))
     590:	65 ea       	ldi	r22, 0xA5	; 165
     592:	71 e0       	ldi	r23, 0x01	; 1
     594:	8a e9       	ldi	r24, 0x9A	; 154
     596:	92 e0       	ldi	r25, 0x02	; 2
     598:	0e 94 72 07 	call	0xee4	; 0xee4 <strstr>
     59c:	89 2b       	or	r24, r25
     59e:	a1 f4       	brne	.+40     	; 0x5c8 <ESP8266_connected+0x54>
	return ESP8266_CREATED_TRANSMISSION;
	else if(strstr(RESPONSE_BUFFER, "STATUS:4"))
     5a0:	6e ea       	ldi	r22, 0xAE	; 174
     5a2:	71 e0       	ldi	r23, 0x01	; 1
     5a4:	8a e9       	ldi	r24, 0x9A	; 154
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	0e 94 72 07 	call	0xee4	; 0xee4 <strstr>
     5ac:	89 2b       	or	r24, r25
     5ae:	71 f4       	brne	.+28     	; 0x5cc <ESP8266_connected+0x58>
	return ESP8266_TRANSMISSION_DISCONNECTED;
	else if(strstr(RESPONSE_BUFFER, "STATUS:5"))
     5b0:	67 eb       	ldi	r22, 0xB7	; 183
     5b2:	71 e0       	ldi	r23, 0x01	; 1
     5b4:	8a e9       	ldi	r24, 0x9A	; 154
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	0e 94 72 07 	call	0xee4	; 0xee4 <strstr>
     5bc:	89 2b       	or	r24, r25
     5be:	41 f4       	brne	.+16     	; 0x5d0 <ESP8266_connected+0x5c>
	return ESP8266_NOT_CONNECTED_TO_AP;
	else
	return ESP8266_CONNECT_UNKNOWN_ERROR;
     5c0:	84 e0       	ldi	r24, 0x04	; 4
     5c2:	08 95       	ret

uint8_t ESP8266_connected()
{
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n");
	if(strstr(RESPONSE_BUFFER, "STATUS:2"))
	return ESP8266_CONNECTED_TO_AP;
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:3"))
	return ESP8266_CREATED_TRANSMISSION;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:4"))
	return ESP8266_TRANSMISSION_DISCONNECTED;
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:5"))
	return ESP8266_NOT_CONNECTED_TO_AP;
     5d0:	83 e0       	ldi	r24, 0x03	; 3
	else
	return ESP8266_CONNECT_UNKNOWN_ERROR;
}
     5d2:	08 95       	ret

000005d4 <ESP8266_Start>:

uint8_t ESP8266_Start(uint8_t _ConnectionNumber, char* Domain, char* Port)
{
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	ec 97       	sbiw	r28, 0x3c	; 60
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	d8 2e       	mov	r13, r24
     5f4:	16 2f       	mov	r17, r22
     5f6:	07 2f       	mov	r16, r23
     5f8:	f4 2e       	mov	r15, r20
     5fa:	e5 2e       	mov	r14, r21
	bool _startResponse;
	char _atCommand[60];
	memset(_atCommand, 0, 60);
     5fc:	fe 01       	movw	r30, r28
     5fe:	31 96       	adiw	r30, 0x01	; 1
     600:	8c e3       	ldi	r24, 0x3C	; 60
     602:	df 01       	movw	r26, r30
     604:	1d 92       	st	X+, r1
     606:	8a 95       	dec	r24
     608:	e9 f7       	brne	.-6      	; 0x604 <ESP8266_Start+0x30>
	_atCommand[59] = 0;

	if(SendATandExpectResponse("AT+CIPMUX?", "CIPMUX:0"))
     60a:	60 ec       	ldi	r22, 0xC0	; 192
     60c:	71 e0       	ldi	r23, 0x01	; 1
     60e:	89 ec       	ldi	r24, 0xC9	; 201
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 8b 01 	call	0x316	; 0x316 <SendATandExpectResponse>
     616:	88 23       	and	r24, r24
     618:	a1 f0       	breq	.+40     	; 0x642 <ESP8266_Start+0x6e>
	sprintf(_atCommand, "AT+CIPSTART=\"TCP\",\"%s\",%s", Domain, Port);
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	84 ed       	ldi	r24, 0xD4	; 212
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	ce 01       	movw	r24, r28
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	9f 93       	push	r25
     630:	8f 93       	push	r24
     632:	0e 94 8c 07 	call	0xf18	; 0xf18 <sprintf>
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	15 c0       	rjmp	.+42     	; 0x66c <ESP8266_Start+0x98>
	else
	sprintf(_atCommand, "AT+CIPSTART=\"%d\",\"TCP\",\"%s\",%s", _ConnectionNumber, Domain, Port);
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	1f 92       	push	r1
     64c:	df 92       	push	r13
     64e:	8e ee       	ldi	r24, 0xEE	; 238
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	0e 94 8c 07 	call	0xf18	; 0xf18 <sprintf>
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61

	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
     66c:	6d e0       	ldi	r22, 0x0D	; 13
     66e:	72 e0       	ldi	r23, 0x02	; 2
     670:	ce 01       	movw	r24, r28
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	0e 94 8b 01 	call	0x316	; 0x316 <SendATandExpectResponse>
	if(!_startResponse)
     678:	81 11       	cpse	r24, r1
     67a:	06 c0       	rjmp	.+12     	; 0x688 <ESP8266_Start+0xb4>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
     67c:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <Response_Status>
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	21 f0       	breq	.+8      	; 0x68c <ESP8266_Start+0xb8>
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
     684:	85 e0       	ldi	r24, 0x05	; 5
     686:	03 c0       	rjmp	.+6      	; 0x68e <ESP8266_Start+0xba>
	}
	return ESP8266_RESPONSE_FINISHED;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	01 c0       	rjmp	.+2      	; 0x68e <ESP8266_Start+0xba>

	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
	if(!_startResponse)
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
     68c:	82 e0       	ldi	r24, 0x02	; 2
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED;
}
     68e:	ec 96       	adiw	r28, 0x3c	; 60
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	0f 91       	pop	r16
     6a2:	ff 90       	pop	r15
     6a4:	ef 90       	pop	r14
     6a6:	df 90       	pop	r13
     6a8:	08 95       	ret

000006aa <ESP8266_Send>:

uint8_t ESP8266_Send(char* Data)
{
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	64 97       	sbiw	r28, 0x14	; 20
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	8c 01       	movw	r16, r24
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     6c8:	ce 01       	movw	r24, r28
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	7c 01       	movw	r14, r24
     6ce:	84 e1       	ldi	r24, 0x14	; 20
     6d0:	f7 01       	movw	r30, r14
     6d2:	11 92       	st	Z+, r1
     6d4:	8a 95       	dec	r24
     6d6:	e9 f7       	brne	.-6      	; 0x6d2 <ESP8266_Send+0x28>
	sprintf(_atCommand, "AT+CIPSEND=%d", (strlen(Data)+2));
     6d8:	f8 01       	movw	r30, r16
     6da:	01 90       	ld	r0, Z+
     6dc:	00 20       	and	r0, r0
     6de:	e9 f7       	brne	.-6      	; 0x6da <ESP8266_Send+0x30>
     6e0:	cf 01       	movw	r24, r30
     6e2:	80 1b       	sub	r24, r16
     6e4:	91 0b       	sbc	r25, r17
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	9f 93       	push	r25
     6ea:	8f 93       	push	r24
     6ec:	87 e1       	ldi	r24, 0x17	; 23
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	9f 93       	push	r25
     6f2:	8f 93       	push	r24
     6f4:	ff 92       	push	r15
     6f6:	ef 92       	push	r14
     6f8:	0e 94 8c 07 	call	0xf18	; 0xf18 <sprintf>
	_atCommand[19] = 0;
     6fc:	1c 8a       	std	Y+20, r1	; 0x14
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
     6fe:	65 e2       	ldi	r22, 0x25	; 37
     700:	72 e0       	ldi	r23, 0x02	; 2
     702:	c7 01       	movw	r24, r14
     704:	0e 94 8b 01 	call	0x316	; 0x316 <SendATandExpectResponse>
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n"))
     708:	6d e2       	ldi	r22, 0x2D	; 45
     70a:	72 e0       	ldi	r23, 0x02	; 2
     70c:	c8 01       	movw	r24, r16
     70e:	0e 94 8b 01 	call	0x316	; 0x316 <SendATandExpectResponse>
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	81 11       	cpse	r24, r1
     720:	06 c0       	rjmp	.+12     	; 0x72e <ESP8266_Send+0x84>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
     722:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <Response_Status>
     726:	82 30       	cpi	r24, 0x02	; 2
     728:	21 f0       	breq	.+8      	; 0x732 <ESP8266_Send+0x88>
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
     72a:	85 e0       	ldi	r24, 0x05	; 5
     72c:	03 c0       	rjmp	.+6      	; 0x734 <ESP8266_Send+0x8a>
	}
	return ESP8266_RESPONSE_FINISHED;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	01 c0       	rjmp	.+2      	; 0x734 <ESP8266_Send+0x8a>
	_atCommand[19] = 0;
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n"))
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
     732:	82 e0       	ldi	r24, 0x02	; 2
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED;
}
     734:	64 96       	adiw	r28, 0x14	; 20
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	f8 94       	cli
     73a:	de bf       	out	0x3e, r29	; 62
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	cd bf       	out	0x3d, r28	; 61
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	08 95       	ret

0000074e <ESP8266_DataAvailable>:

int16_t ESP8266_DataAvailable()
{
	return (Counter - pointer);
     74e:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <Counter>
     752:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <Counter+0x1>
     756:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <pointer>
     75a:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <pointer+0x1>
}
     75e:	82 1b       	sub	r24, r18
     760:	93 0b       	sbc	r25, r19
     762:	08 95       	ret

00000764 <ESP8266_DataRead>:

uint8_t ESP8266_DataRead()
{
	if(pointer < Counter)
     764:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <pointer>
     768:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <pointer+0x1>
     76c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <Counter>
     770:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <Counter+0x1>
     774:	28 17       	cp	r18, r24
     776:	39 07       	cpc	r19, r25
     778:	84 f4       	brge	.+32     	; 0x79a <ESP8266_DataRead+0x36>
	return RESPONSE_BUFFER[pointer++];
     77a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <pointer>
     77e:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <pointer+0x1>
     782:	9c 01       	movw	r18, r24
     784:	2f 5f       	subi	r18, 0xFF	; 255
     786:	3f 4f       	sbci	r19, 0xFF	; 255
     788:	30 93 97 02 	sts	0x0297, r19	; 0x800297 <pointer+0x1>
     78c:	20 93 96 02 	sts	0x0296, r18	; 0x800296 <pointer>
     790:	fc 01       	movw	r30, r24
     792:	e6 56       	subi	r30, 0x66	; 102
     794:	fd 4f       	sbci	r31, 0xFD	; 253
     796:	80 81       	ld	r24, Z
     798:	08 95       	ret
	else{
		ESP8266_Clear();
     79a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ESP8266_Clear>
		return 0;
     79e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     7a0:	08 95       	ret

000007a2 <Read_Data>:

uint16_t Read_Data(char* _buffer)
{
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7aa:	e7 ea       	ldi	r30, 0xA7	; 167
     7ac:	f1 e6       	ldi	r31, 0x61	; 97
     7ae:	31 97       	sbiw	r30, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <Read_Data+0xc>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <Read_Data+0x12>
     7b4:	00 00       	nop
     7b6:	c8 2f       	mov	r28, r24
     7b8:	d9 2f       	mov	r29, r25
	uint16_t len = 0;
     7ba:	00 e0       	ldi	r16, 0x00	; 0
     7bc:	10 e0       	ldi	r17, 0x00	; 0
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <Read_Data+0x28>
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
	_buffer[len++] = ESP8266_DataRead();
     7c0:	0f 5f       	subi	r16, 0xFF	; 255
     7c2:	1f 4f       	sbci	r17, 0xFF	; 255
     7c4:	0e 94 b2 03 	call	0x764	; 0x764 <ESP8266_DataRead>
     7c8:	89 93       	st	Y+, r24

uint16_t Read_Data(char* _buffer)
{
	uint16_t len = 0;
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
     7ca:	0e 94 a7 03 	call	0x74e	; 0x74e <ESP8266_DataAvailable>
     7ce:	18 16       	cp	r1, r24
     7d0:	19 06       	cpc	r1, r25
     7d2:	b4 f3       	brlt	.-20     	; 0x7c0 <Read_Data+0x1e>
	_buffer[len++] = ESP8266_DataRead();
	return len;
}
     7d4:	c8 01       	movw	r24, r16
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <__vector_18>:

ISR (USART_RX_vect)
{
     7e0:	1f 92       	push	r1
     7e2:	0f 92       	push	r0
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	0f 92       	push	r0
     7e8:	11 24       	eor	r1, r1
     7ea:	2f 93       	push	r18
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	ef 93       	push	r30
     7f2:	ff 93       	push	r31
	uint8_t oldsrg = SREG;
     7f4:	2f b7       	in	r18, 0x3f	; 63
	cli();
     7f6:	f8 94       	cli
	RESPONSE_BUFFER[Counter] = UDR0;
     7f8:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <Counter>
     7fc:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <Counter+0x1>
     800:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     804:	e6 56       	subi	r30, 0x66	; 102
     806:	fd 4f       	sbci	r31, 0xFD	; 253
     808:	80 83       	st	Z, r24
	Counter++;
     80a:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <Counter>
     80e:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <Counter+0x1>
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <Counter+0x1>
     818:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <Counter>
	if(Counter == DEFAULT_BUFFER_SIZE){
     81c:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <Counter>
     820:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <Counter+0x1>
     824:	80 3a       	cpi	r24, 0xA0	; 160
     826:	91 05       	cpc	r25, r1
     828:	41 f4       	brne	.+16     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
		Counter = 0; pointer = 0;
     82a:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <Counter+0x1>
     82e:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <Counter>
     832:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <pointer+0x1>
     836:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <pointer>
	}
	SREG = oldsrg;
     83a:	2f bf       	out	0x3f, r18	; 63
}
     83c:	ff 91       	pop	r31
     83e:	ef 91       	pop	r30
     840:	9f 91       	pop	r25
     842:	8f 91       	pop	r24
     844:	2f 91       	pop	r18
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <main>:
#include <util/delay.h>
#include "USART_RS232_H_file.h"		
#include "ESP8266_H_file.h"			/* Include ESP8266 header file */

int main(void)
{
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	c6 59       	subi	r28, 0x96	; 150
     85a:	d1 09       	sbc	r29, r1
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	de bf       	out	0x3e, r29	; 62
     862:	0f be       	out	0x3f, r0	; 63
     864:	cd bf       	out	0x3d, r28	; 61
	uint8_t Connect_Status;
	#ifdef SEND_DEMO
	uint8_t Sample = 0;
	#endif
	
	DDRD |= (1 << PD6);
     866:	56 9a       	sbi	0x0a, 6	; 10

	USART_Init(115200);						/* Initiate USART with 115200 baud rate */
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	72 ec       	ldi	r23, 0xC2	; 194
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 a7 04 	call	0x94e	; 0x94e <USART_Init>
	sei();									/* Start global interrupt */
     874:	78 94       	sei
	
	while(!ESP8266_Begin());
     876:	0e 94 0c 02 	call	0x418	; 0x418 <ESP8266_Begin>
     87a:	88 23       	and	r24, r24
     87c:	e1 f3       	breq	.-8      	; 0x876 <main+0x26>
	
	PORTD ^= (1 << PD6);
     87e:	9b b1       	in	r25, 0x0b	; 11
     880:	80 e4       	ldi	r24, 0x40	; 64
     882:	89 27       	eor	r24, r25
     884:	8b b9       	out	0x0b, r24	; 11
	
	ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);/* 3 = Both (AP and STA) */
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	0e 94 22 02 	call	0x444	; 0x444 <ESP8266_WIFIMode>
	ESP8266_ConnectionMode(SINGLE);			/* 0 = Single; 1 = Multi */
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ESP8266_ConnectionMode>
	ESP8266_ApplicationMode(NORMAL);		/* 0 = Normal Mode; 1 = Transperant Mode */
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	0e 94 a2 01 	call	0x344	; 0x344 <ESP8266_ApplicationMode>
	if(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)
     898:	0e 94 ba 02 	call	0x574	; 0x574 <ESP8266_connected>
     89c:	83 30       	cpi	r24, 0x03	; 3
     89e:	31 f4       	brne	.+12     	; 0x8ac <main+0x5c>
	ESP8266_JoinAccessPoint(SSID, PASSWORD);
     8a0:	69 e3       	ldi	r22, 0x39	; 57
     8a2:	72 e0       	ldi	r23, 0x02	; 2
     8a4:	85 e4       	ldi	r24, 0x45	; 69
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	0e 94 57 02 	call	0x4ae	; 0x4ae <ESP8266_JoinAccessPoint>
	ESP8266_Start(0, DOMAIN, PORT);
     8ac:	45 e5       	ldi	r20, 0x55	; 85
     8ae:	52 e0       	ldi	r21, 0x02	; 2
     8b0:	68 e5       	ldi	r22, 0x58	; 88
     8b2:	72 e0       	ldi	r23, 0x02	; 2
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <ESP8266_Start>
		ESP8266_Send(_buffer);
		_delay_ms(15000);	/* Thingspeak server delay */
		#endif
		
		#ifdef RECEIVE_DEMO
		memset(_buffer, 0, 150);
     8ba:	0f 2e       	mov	r0, r31
     8bc:	f6 e9       	ldi	r31, 0x96	; 150
     8be:	bf 2e       	mov	r11, r31
     8c0:	f0 2d       	mov	r31, r0
     8c2:	8e 01       	movw	r16, r28
     8c4:	0f 5f       	subi	r16, 0xFF	; 255
     8c6:	1f 4f       	sbci	r17, 0xFF	; 255
		sprintf(_buffer, "GET /channels/%s/feeds/last.txt", CHANNEL_ID);
     8c8:	0f 2e       	mov	r0, r31
     8ca:	fb e6       	ldi	r31, 0x6B	; 107
     8cc:	cf 2e       	mov	r12, r31
     8ce:	f2 e0       	ldi	r31, 0x02	; 2
     8d0:	df 2e       	mov	r13, r31
     8d2:	f0 2d       	mov	r31, r0
     8d4:	0f 2e       	mov	r0, r31
     8d6:	f2 e7       	ldi	r31, 0x72	; 114
     8d8:	ef 2e       	mov	r14, r31
     8da:	f2 e0       	ldi	r31, 0x02	; 2
     8dc:	ff 2e       	mov	r15, r31
     8de:	f0 2d       	mov	r31, r0
	if(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)
	ESP8266_JoinAccessPoint(SSID, PASSWORD);
	ESP8266_Start(0, DOMAIN, PORT);
	while(1)
	{
		Connect_Status = ESP8266_connected();
     8e0:	0e 94 ba 02 	call	0x574	; 0x574 <ESP8266_connected>
		if(Connect_Status == ESP8266_NOT_CONNECTED_TO_AP)
     8e4:	83 30       	cpi	r24, 0x03	; 3
     8e6:	39 f4       	brne	.+14     	; 0x8f6 <main+0xa6>
		ESP8266_JoinAccessPoint(SSID, PASSWORD);
     8e8:	69 e3       	ldi	r22, 0x39	; 57
     8ea:	72 e0       	ldi	r23, 0x02	; 2
     8ec:	85 e4       	ldi	r24, 0x45	; 69
     8ee:	92 e0       	ldi	r25, 0x02	; 2
     8f0:	0e 94 57 02 	call	0x4ae	; 0x4ae <ESP8266_JoinAccessPoint>
     8f4:	09 c0       	rjmp	.+18     	; 0x908 <__stack+0x9>
		if(Connect_Status == ESP8266_TRANSMISSION_DISCONNECTED)
     8f6:	82 30       	cpi	r24, 0x02	; 2
     8f8:	39 f4       	brne	.+14     	; 0x908 <__stack+0x9>
		ESP8266_Start(0, DOMAIN, PORT);
     8fa:	45 e5       	ldi	r20, 0x55	; 85
     8fc:	52 e0       	ldi	r21, 0x02	; 2
     8fe:	68 e5       	ldi	r22, 0x58	; 88
     900:	72 e0       	ldi	r23, 0x02	; 2
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <ESP8266_Start>
		ESP8266_Send(_buffer);
		_delay_ms(15000);	/* Thingspeak server delay */
		#endif
		
		#ifdef RECEIVE_DEMO
		memset(_buffer, 0, 150);
     908:	f8 01       	movw	r30, r16
     90a:	2b 2d       	mov	r18, r11
     90c:	11 92       	st	Z+, r1
     90e:	2a 95       	dec	r18
     910:	e9 f7       	brne	.-6      	; 0x90c <__stack+0xd>
		sprintf(_buffer, "GET /channels/%s/feeds/last.txt", CHANNEL_ID);
     912:	df 92       	push	r13
     914:	cf 92       	push	r12
     916:	ff 92       	push	r15
     918:	ef 92       	push	r14
     91a:	1f 93       	push	r17
     91c:	0f 93       	push	r16
     91e:	0e 94 8c 07 	call	0xf18	; 0xf18 <sprintf>
		ESP8266_Send(_buffer);
     922:	c8 01       	movw	r24, r16
     924:	0e 94 55 03 	call	0x6aa	; 0x6aa <ESP8266_Send>
		Read_Data(_buffer);
     928:	c8 01       	movw	r24, r16
     92a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <Read_Data>
     92e:	8f eb       	ldi	r24, 0xBF	; 191
     930:	94 ed       	ldi	r25, 0xD4	; 212
     932:	e1 e0       	ldi	r30, 0x01	; 1
     934:	81 50       	subi	r24, 0x01	; 1
     936:	90 40       	sbci	r25, 0x00	; 0
     938:	e0 40       	sbci	r30, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <__stack+0x35>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <__stack+0x3f>
     93e:	00 00       	nop
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	c9 cf       	rjmp	.-110    	; 0x8e0 <main+0x90>

0000094e <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR0A & (1 << RXC0)));				/* Wait until new data receive */
	return(UDR0);									/* Get and return received data */
}
     94e:	e0 ec       	ldi	r30, 0xC0	; 192
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	20 81       	ld	r18, Z
     954:	22 60       	ori	r18, 0x02	; 2
     956:	20 83       	st	Z, r18
     958:	e1 ec       	ldi	r30, 0xC1	; 193
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	20 81       	ld	r18, Z
     95e:	28 69       	ori	r18, 0x98	; 152
     960:	20 83       	st	Z, r18
     962:	e2 ec       	ldi	r30, 0xC2	; 194
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	20 81       	ld	r18, Z
     968:	26 60       	ori	r18, 0x06	; 6
     96a:	20 83       	st	Z, r18
     96c:	0e 94 01 06 	call	0xc02	; 0xc02 <__floatunsisf>
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	51 e4       	ldi	r21, 0x41	; 65
     978:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__mulsf3>
     97c:	9b 01       	movw	r18, r22
     97e:	ac 01       	movw	r20, r24
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	74 e2       	ldi	r23, 0x24	; 36
     984:	84 e7       	ldi	r24, 0x74	; 116
     986:	99 e4       	ldi	r25, 0x49	; 73
     988:	0e 94 59 05 	call	0xab2	; 0xab2 <__divsf3>
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e8       	ldi	r20, 0x80	; 128
     992:	5f e3       	ldi	r21, 0x3F	; 63
     994:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__subsf3>
     998:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <round>
     99c:	0e 94 cb 05 	call	0xb96	; 0xb96 <__fixsfsi>
     9a0:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     9a4:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     9a8:	08 95       	ret

000009aa <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR0 = data;									/* Write data to be transmitting in UDR0 */
     9aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while (!(UCSR0A & (1<<UDRE0)));					/* Wait until data transmit and buffer get empty */
     9ae:	e0 ec       	ldi	r30, 0xC0	; 192
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	85 ff       	sbrs	r24, 5
     9b6:	fd cf       	rjmp	.-6      	; 0x9b2 <USART_TxChar+0x8>
}
     9b8:	08 95       	ret

000009ba <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */
{
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!=0)
     9c0:	88 81       	ld	r24, Y
     9c2:	88 23       	and	r24, r24
     9c4:	31 f0       	breq	.+12     	; 0x9d2 <USART_SendString+0x18>
     9c6:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     9c8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
     9cc:	89 91       	ld	r24, Y+
     9ce:	81 11       	cpse	r24, r1
     9d0:	fb cf       	rjmp	.-10     	; 0x9c8 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <__subsf3>:
     9d8:	50 58       	subi	r21, 0x80	; 128

000009da <__addsf3>:
     9da:	bb 27       	eor	r27, r27
     9dc:	aa 27       	eor	r26, r26
     9de:	0e 94 04 05 	call	0xa08	; 0xa08 <__addsf3x>
     9e2:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_round>
     9e6:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_pscA>
     9ea:	38 f0       	brcs	.+14     	; 0x9fa <__addsf3+0x20>
     9ec:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__fp_pscB>
     9f0:	20 f0       	brcs	.+8      	; 0x9fa <__addsf3+0x20>
     9f2:	39 f4       	brne	.+14     	; 0xa02 <__addsf3+0x28>
     9f4:	9f 3f       	cpi	r25, 0xFF	; 255
     9f6:	19 f4       	brne	.+6      	; 0x9fe <__addsf3+0x24>
     9f8:	26 f4       	brtc	.+8      	; 0xa02 <__addsf3+0x28>
     9fa:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__fp_nan>
     9fe:	0e f4       	brtc	.+2      	; 0xa02 <__addsf3+0x28>
     a00:	e0 95       	com	r30
     a02:	e7 fb       	bst	r30, 7
     a04:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_inf>

00000a08 <__addsf3x>:
     a08:	e9 2f       	mov	r30, r25
     a0a:	0e 94 66 06 	call	0xccc	; 0xccc <__fp_split3>
     a0e:	58 f3       	brcs	.-42     	; 0x9e6 <__addsf3+0xc>
     a10:	ba 17       	cp	r27, r26
     a12:	62 07       	cpc	r22, r18
     a14:	73 07       	cpc	r23, r19
     a16:	84 07       	cpc	r24, r20
     a18:	95 07       	cpc	r25, r21
     a1a:	20 f0       	brcs	.+8      	; 0xa24 <__addsf3x+0x1c>
     a1c:	79 f4       	brne	.+30     	; 0xa3c <__addsf3x+0x34>
     a1e:	a6 f5       	brtc	.+104    	; 0xa88 <__addsf3x+0x80>
     a20:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_zero>
     a24:	0e f4       	brtc	.+2      	; 0xa28 <__addsf3x+0x20>
     a26:	e0 95       	com	r30
     a28:	0b 2e       	mov	r0, r27
     a2a:	ba 2f       	mov	r27, r26
     a2c:	a0 2d       	mov	r26, r0
     a2e:	0b 01       	movw	r0, r22
     a30:	b9 01       	movw	r22, r18
     a32:	90 01       	movw	r18, r0
     a34:	0c 01       	movw	r0, r24
     a36:	ca 01       	movw	r24, r20
     a38:	a0 01       	movw	r20, r0
     a3a:	11 24       	eor	r1, r1
     a3c:	ff 27       	eor	r31, r31
     a3e:	59 1b       	sub	r21, r25
     a40:	99 f0       	breq	.+38     	; 0xa68 <__addsf3x+0x60>
     a42:	59 3f       	cpi	r21, 0xF9	; 249
     a44:	50 f4       	brcc	.+20     	; 0xa5a <__addsf3x+0x52>
     a46:	50 3e       	cpi	r21, 0xE0	; 224
     a48:	68 f1       	brcs	.+90     	; 0xaa4 <__addsf3x+0x9c>
     a4a:	1a 16       	cp	r1, r26
     a4c:	f0 40       	sbci	r31, 0x00	; 0
     a4e:	a2 2f       	mov	r26, r18
     a50:	23 2f       	mov	r18, r19
     a52:	34 2f       	mov	r19, r20
     a54:	44 27       	eor	r20, r20
     a56:	58 5f       	subi	r21, 0xF8	; 248
     a58:	f3 cf       	rjmp	.-26     	; 0xa40 <__addsf3x+0x38>
     a5a:	46 95       	lsr	r20
     a5c:	37 95       	ror	r19
     a5e:	27 95       	ror	r18
     a60:	a7 95       	ror	r26
     a62:	f0 40       	sbci	r31, 0x00	; 0
     a64:	53 95       	inc	r21
     a66:	c9 f7       	brne	.-14     	; 0xa5a <__addsf3x+0x52>
     a68:	7e f4       	brtc	.+30     	; 0xa88 <__addsf3x+0x80>
     a6a:	1f 16       	cp	r1, r31
     a6c:	ba 0b       	sbc	r27, r26
     a6e:	62 0b       	sbc	r22, r18
     a70:	73 0b       	sbc	r23, r19
     a72:	84 0b       	sbc	r24, r20
     a74:	ba f0       	brmi	.+46     	; 0xaa4 <__addsf3x+0x9c>
     a76:	91 50       	subi	r25, 0x01	; 1
     a78:	a1 f0       	breq	.+40     	; 0xaa2 <__addsf3x+0x9a>
     a7a:	ff 0f       	add	r31, r31
     a7c:	bb 1f       	adc	r27, r27
     a7e:	66 1f       	adc	r22, r22
     a80:	77 1f       	adc	r23, r23
     a82:	88 1f       	adc	r24, r24
     a84:	c2 f7       	brpl	.-16     	; 0xa76 <__addsf3x+0x6e>
     a86:	0e c0       	rjmp	.+28     	; 0xaa4 <__addsf3x+0x9c>
     a88:	ba 0f       	add	r27, r26
     a8a:	62 1f       	adc	r22, r18
     a8c:	73 1f       	adc	r23, r19
     a8e:	84 1f       	adc	r24, r20
     a90:	48 f4       	brcc	.+18     	; 0xaa4 <__addsf3x+0x9c>
     a92:	87 95       	ror	r24
     a94:	77 95       	ror	r23
     a96:	67 95       	ror	r22
     a98:	b7 95       	ror	r27
     a9a:	f7 95       	ror	r31
     a9c:	9e 3f       	cpi	r25, 0xFE	; 254
     a9e:	08 f0       	brcs	.+2      	; 0xaa2 <__addsf3x+0x9a>
     aa0:	b0 cf       	rjmp	.-160    	; 0xa02 <__addsf3+0x28>
     aa2:	93 95       	inc	r25
     aa4:	88 0f       	add	r24, r24
     aa6:	08 f0       	brcs	.+2      	; 0xaaa <__addsf3x+0xa2>
     aa8:	99 27       	eor	r25, r25
     aaa:	ee 0f       	add	r30, r30
     aac:	97 95       	ror	r25
     aae:	87 95       	ror	r24
     ab0:	08 95       	ret

00000ab2 <__divsf3>:
     ab2:	0e 94 6d 05 	call	0xada	; 0xada <__divsf3x>
     ab6:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_round>
     aba:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__fp_pscB>
     abe:	58 f0       	brcs	.+22     	; 0xad6 <__divsf3+0x24>
     ac0:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_pscA>
     ac4:	40 f0       	brcs	.+16     	; 0xad6 <__divsf3+0x24>
     ac6:	29 f4       	brne	.+10     	; 0xad2 <__divsf3+0x20>
     ac8:	5f 3f       	cpi	r21, 0xFF	; 255
     aca:	29 f0       	breq	.+10     	; 0xad6 <__divsf3+0x24>
     acc:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_inf>
     ad0:	51 11       	cpse	r21, r1
     ad2:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_szero>
     ad6:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__fp_nan>

00000ada <__divsf3x>:
     ada:	0e 94 66 06 	call	0xccc	; 0xccc <__fp_split3>
     ade:	68 f3       	brcs	.-38     	; 0xaba <__divsf3+0x8>

00000ae0 <__divsf3_pse>:
     ae0:	99 23       	and	r25, r25
     ae2:	b1 f3       	breq	.-20     	; 0xad0 <__divsf3+0x1e>
     ae4:	55 23       	and	r21, r21
     ae6:	91 f3       	breq	.-28     	; 0xacc <__divsf3+0x1a>
     ae8:	95 1b       	sub	r25, r21
     aea:	55 0b       	sbc	r21, r21
     aec:	bb 27       	eor	r27, r27
     aee:	aa 27       	eor	r26, r26
     af0:	62 17       	cp	r22, r18
     af2:	73 07       	cpc	r23, r19
     af4:	84 07       	cpc	r24, r20
     af6:	38 f0       	brcs	.+14     	; 0xb06 <__divsf3_pse+0x26>
     af8:	9f 5f       	subi	r25, 0xFF	; 255
     afa:	5f 4f       	sbci	r21, 0xFF	; 255
     afc:	22 0f       	add	r18, r18
     afe:	33 1f       	adc	r19, r19
     b00:	44 1f       	adc	r20, r20
     b02:	aa 1f       	adc	r26, r26
     b04:	a9 f3       	breq	.-22     	; 0xaf0 <__divsf3_pse+0x10>
     b06:	35 d0       	rcall	.+106    	; 0xb72 <__divsf3_pse+0x92>
     b08:	0e 2e       	mov	r0, r30
     b0a:	3a f0       	brmi	.+14     	; 0xb1a <__divsf3_pse+0x3a>
     b0c:	e0 e8       	ldi	r30, 0x80	; 128
     b0e:	32 d0       	rcall	.+100    	; 0xb74 <__divsf3_pse+0x94>
     b10:	91 50       	subi	r25, 0x01	; 1
     b12:	50 40       	sbci	r21, 0x00	; 0
     b14:	e6 95       	lsr	r30
     b16:	00 1c       	adc	r0, r0
     b18:	ca f7       	brpl	.-14     	; 0xb0c <__divsf3_pse+0x2c>
     b1a:	2b d0       	rcall	.+86     	; 0xb72 <__divsf3_pse+0x92>
     b1c:	fe 2f       	mov	r31, r30
     b1e:	29 d0       	rcall	.+82     	; 0xb72 <__divsf3_pse+0x92>
     b20:	66 0f       	add	r22, r22
     b22:	77 1f       	adc	r23, r23
     b24:	88 1f       	adc	r24, r24
     b26:	bb 1f       	adc	r27, r27
     b28:	26 17       	cp	r18, r22
     b2a:	37 07       	cpc	r19, r23
     b2c:	48 07       	cpc	r20, r24
     b2e:	ab 07       	cpc	r26, r27
     b30:	b0 e8       	ldi	r27, 0x80	; 128
     b32:	09 f0       	breq	.+2      	; 0xb36 <__divsf3_pse+0x56>
     b34:	bb 0b       	sbc	r27, r27
     b36:	80 2d       	mov	r24, r0
     b38:	bf 01       	movw	r22, r30
     b3a:	ff 27       	eor	r31, r31
     b3c:	93 58       	subi	r25, 0x83	; 131
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	3a f0       	brmi	.+14     	; 0xb50 <__divsf3_pse+0x70>
     b42:	9e 3f       	cpi	r25, 0xFE	; 254
     b44:	51 05       	cpc	r21, r1
     b46:	78 f0       	brcs	.+30     	; 0xb66 <__divsf3_pse+0x86>
     b48:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_inf>
     b4c:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_szero>
     b50:	5f 3f       	cpi	r21, 0xFF	; 255
     b52:	e4 f3       	brlt	.-8      	; 0xb4c <__divsf3_pse+0x6c>
     b54:	98 3e       	cpi	r25, 0xE8	; 232
     b56:	d4 f3       	brlt	.-12     	; 0xb4c <__divsf3_pse+0x6c>
     b58:	86 95       	lsr	r24
     b5a:	77 95       	ror	r23
     b5c:	67 95       	ror	r22
     b5e:	b7 95       	ror	r27
     b60:	f7 95       	ror	r31
     b62:	9f 5f       	subi	r25, 0xFF	; 255
     b64:	c9 f7       	brne	.-14     	; 0xb58 <__divsf3_pse+0x78>
     b66:	88 0f       	add	r24, r24
     b68:	91 1d       	adc	r25, r1
     b6a:	96 95       	lsr	r25
     b6c:	87 95       	ror	r24
     b6e:	97 f9       	bld	r25, 7
     b70:	08 95       	ret
     b72:	e1 e0       	ldi	r30, 0x01	; 1
     b74:	66 0f       	add	r22, r22
     b76:	77 1f       	adc	r23, r23
     b78:	88 1f       	adc	r24, r24
     b7a:	bb 1f       	adc	r27, r27
     b7c:	62 17       	cp	r22, r18
     b7e:	73 07       	cpc	r23, r19
     b80:	84 07       	cpc	r24, r20
     b82:	ba 07       	cpc	r27, r26
     b84:	20 f0       	brcs	.+8      	; 0xb8e <__divsf3_pse+0xae>
     b86:	62 1b       	sub	r22, r18
     b88:	73 0b       	sbc	r23, r19
     b8a:	84 0b       	sbc	r24, r20
     b8c:	ba 0b       	sbc	r27, r26
     b8e:	ee 1f       	adc	r30, r30
     b90:	88 f7       	brcc	.-30     	; 0xb74 <__divsf3_pse+0x94>
     b92:	e0 95       	com	r30
     b94:	08 95       	ret

00000b96 <__fixsfsi>:
     b96:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fixunssfsi>
     b9a:	68 94       	set
     b9c:	b1 11       	cpse	r27, r1
     b9e:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_szero>
     ba2:	08 95       	ret

00000ba4 <__fixunssfsi>:
     ba4:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__fp_splitA>
     ba8:	88 f0       	brcs	.+34     	; 0xbcc <__fixunssfsi+0x28>
     baa:	9f 57       	subi	r25, 0x7F	; 127
     bac:	98 f0       	brcs	.+38     	; 0xbd4 <__fixunssfsi+0x30>
     bae:	b9 2f       	mov	r27, r25
     bb0:	99 27       	eor	r25, r25
     bb2:	b7 51       	subi	r27, 0x17	; 23
     bb4:	b0 f0       	brcs	.+44     	; 0xbe2 <__fixunssfsi+0x3e>
     bb6:	e1 f0       	breq	.+56     	; 0xbf0 <__fixunssfsi+0x4c>
     bb8:	66 0f       	add	r22, r22
     bba:	77 1f       	adc	r23, r23
     bbc:	88 1f       	adc	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	1a f0       	brmi	.+6      	; 0xbc8 <__fixunssfsi+0x24>
     bc2:	ba 95       	dec	r27
     bc4:	c9 f7       	brne	.-14     	; 0xbb8 <__fixunssfsi+0x14>
     bc6:	14 c0       	rjmp	.+40     	; 0xbf0 <__fixunssfsi+0x4c>
     bc8:	b1 30       	cpi	r27, 0x01	; 1
     bca:	91 f0       	breq	.+36     	; 0xbf0 <__fixunssfsi+0x4c>
     bcc:	0e 94 88 06 	call	0xd10	; 0xd10 <__fp_zero>
     bd0:	b1 e0       	ldi	r27, 0x01	; 1
     bd2:	08 95       	ret
     bd4:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_zero>
     bd8:	67 2f       	mov	r22, r23
     bda:	78 2f       	mov	r23, r24
     bdc:	88 27       	eor	r24, r24
     bde:	b8 5f       	subi	r27, 0xF8	; 248
     be0:	39 f0       	breq	.+14     	; 0xbf0 <__fixunssfsi+0x4c>
     be2:	b9 3f       	cpi	r27, 0xF9	; 249
     be4:	cc f3       	brlt	.-14     	; 0xbd8 <__fixunssfsi+0x34>
     be6:	86 95       	lsr	r24
     be8:	77 95       	ror	r23
     bea:	67 95       	ror	r22
     bec:	b3 95       	inc	r27
     bee:	d9 f7       	brne	.-10     	; 0xbe6 <__fixunssfsi+0x42>
     bf0:	3e f4       	brtc	.+14     	; 0xc00 <__fixunssfsi+0x5c>
     bf2:	90 95       	com	r25
     bf4:	80 95       	com	r24
     bf6:	70 95       	com	r23
     bf8:	61 95       	neg	r22
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	8f 4f       	sbci	r24, 0xFF	; 255
     bfe:	9f 4f       	sbci	r25, 0xFF	; 255
     c00:	08 95       	ret

00000c02 <__floatunsisf>:
     c02:	e8 94       	clt
     c04:	09 c0       	rjmp	.+18     	; 0xc18 <__floatsisf+0x12>

00000c06 <__floatsisf>:
     c06:	97 fb       	bst	r25, 7
     c08:	3e f4       	brtc	.+14     	; 0xc18 <__floatsisf+0x12>
     c0a:	90 95       	com	r25
     c0c:	80 95       	com	r24
     c0e:	70 95       	com	r23
     c10:	61 95       	neg	r22
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	8f 4f       	sbci	r24, 0xFF	; 255
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	99 23       	and	r25, r25
     c1a:	a9 f0       	breq	.+42     	; 0xc46 <__floatsisf+0x40>
     c1c:	f9 2f       	mov	r31, r25
     c1e:	96 e9       	ldi	r25, 0x96	; 150
     c20:	bb 27       	eor	r27, r27
     c22:	93 95       	inc	r25
     c24:	f6 95       	lsr	r31
     c26:	87 95       	ror	r24
     c28:	77 95       	ror	r23
     c2a:	67 95       	ror	r22
     c2c:	b7 95       	ror	r27
     c2e:	f1 11       	cpse	r31, r1
     c30:	f8 cf       	rjmp	.-16     	; 0xc22 <__floatsisf+0x1c>
     c32:	fa f4       	brpl	.+62     	; 0xc72 <__floatsisf+0x6c>
     c34:	bb 0f       	add	r27, r27
     c36:	11 f4       	brne	.+4      	; 0xc3c <__floatsisf+0x36>
     c38:	60 ff       	sbrs	r22, 0
     c3a:	1b c0       	rjmp	.+54     	; 0xc72 <__floatsisf+0x6c>
     c3c:	6f 5f       	subi	r22, 0xFF	; 255
     c3e:	7f 4f       	sbci	r23, 0xFF	; 255
     c40:	8f 4f       	sbci	r24, 0xFF	; 255
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	16 c0       	rjmp	.+44     	; 0xc72 <__floatsisf+0x6c>
     c46:	88 23       	and	r24, r24
     c48:	11 f0       	breq	.+4      	; 0xc4e <__floatsisf+0x48>
     c4a:	96 e9       	ldi	r25, 0x96	; 150
     c4c:	11 c0       	rjmp	.+34     	; 0xc70 <__floatsisf+0x6a>
     c4e:	77 23       	and	r23, r23
     c50:	21 f0       	breq	.+8      	; 0xc5a <__floatsisf+0x54>
     c52:	9e e8       	ldi	r25, 0x8E	; 142
     c54:	87 2f       	mov	r24, r23
     c56:	76 2f       	mov	r23, r22
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <__floatsisf+0x5e>
     c5a:	66 23       	and	r22, r22
     c5c:	71 f0       	breq	.+28     	; 0xc7a <__floatsisf+0x74>
     c5e:	96 e8       	ldi	r25, 0x86	; 134
     c60:	86 2f       	mov	r24, r22
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	2a f0       	brmi	.+10     	; 0xc72 <__floatsisf+0x6c>
     c68:	9a 95       	dec	r25
     c6a:	66 0f       	add	r22, r22
     c6c:	77 1f       	adc	r23, r23
     c6e:	88 1f       	adc	r24, r24
     c70:	da f7       	brpl	.-10     	; 0xc68 <__floatsisf+0x62>
     c72:	88 0f       	add	r24, r24
     c74:	96 95       	lsr	r25
     c76:	87 95       	ror	r24
     c78:	97 f9       	bld	r25, 7
     c7a:	08 95       	ret

00000c7c <__fp_inf>:
     c7c:	97 f9       	bld	r25, 7
     c7e:	9f 67       	ori	r25, 0x7F	; 127
     c80:	80 e8       	ldi	r24, 0x80	; 128
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	08 95       	ret

00000c88 <__fp_nan>:
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	80 ec       	ldi	r24, 0xC0	; 192
     c8c:	08 95       	ret

00000c8e <__fp_pscA>:
     c8e:	00 24       	eor	r0, r0
     c90:	0a 94       	dec	r0
     c92:	16 16       	cp	r1, r22
     c94:	17 06       	cpc	r1, r23
     c96:	18 06       	cpc	r1, r24
     c98:	09 06       	cpc	r0, r25
     c9a:	08 95       	ret

00000c9c <__fp_pscB>:
     c9c:	00 24       	eor	r0, r0
     c9e:	0a 94       	dec	r0
     ca0:	12 16       	cp	r1, r18
     ca2:	13 06       	cpc	r1, r19
     ca4:	14 06       	cpc	r1, r20
     ca6:	05 06       	cpc	r0, r21
     ca8:	08 95       	ret

00000caa <__fp_round>:
     caa:	09 2e       	mov	r0, r25
     cac:	03 94       	inc	r0
     cae:	00 0c       	add	r0, r0
     cb0:	11 f4       	brne	.+4      	; 0xcb6 <__fp_round+0xc>
     cb2:	88 23       	and	r24, r24
     cb4:	52 f0       	brmi	.+20     	; 0xcca <__fp_round+0x20>
     cb6:	bb 0f       	add	r27, r27
     cb8:	40 f4       	brcc	.+16     	; 0xcca <__fp_round+0x20>
     cba:	bf 2b       	or	r27, r31
     cbc:	11 f4       	brne	.+4      	; 0xcc2 <__fp_round+0x18>
     cbe:	60 ff       	sbrs	r22, 0
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <__fp_round+0x20>
     cc2:	6f 5f       	subi	r22, 0xFF	; 255
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	08 95       	ret

00000ccc <__fp_split3>:
     ccc:	57 fd       	sbrc	r21, 7
     cce:	90 58       	subi	r25, 0x80	; 128
     cd0:	44 0f       	add	r20, r20
     cd2:	55 1f       	adc	r21, r21
     cd4:	59 f0       	breq	.+22     	; 0xcec <__fp_splitA+0x10>
     cd6:	5f 3f       	cpi	r21, 0xFF	; 255
     cd8:	71 f0       	breq	.+28     	; 0xcf6 <__fp_splitA+0x1a>
     cda:	47 95       	ror	r20

00000cdc <__fp_splitA>:
     cdc:	88 0f       	add	r24, r24
     cde:	97 fb       	bst	r25, 7
     ce0:	99 1f       	adc	r25, r25
     ce2:	61 f0       	breq	.+24     	; 0xcfc <__fp_splitA+0x20>
     ce4:	9f 3f       	cpi	r25, 0xFF	; 255
     ce6:	79 f0       	breq	.+30     	; 0xd06 <__fp_splitA+0x2a>
     ce8:	87 95       	ror	r24
     cea:	08 95       	ret
     cec:	12 16       	cp	r1, r18
     cee:	13 06       	cpc	r1, r19
     cf0:	14 06       	cpc	r1, r20
     cf2:	55 1f       	adc	r21, r21
     cf4:	f2 cf       	rjmp	.-28     	; 0xcda <__fp_split3+0xe>
     cf6:	46 95       	lsr	r20
     cf8:	f1 df       	rcall	.-30     	; 0xcdc <__fp_splitA>
     cfa:	08 c0       	rjmp	.+16     	; 0xd0c <__fp_splitA+0x30>
     cfc:	16 16       	cp	r1, r22
     cfe:	17 06       	cpc	r1, r23
     d00:	18 06       	cpc	r1, r24
     d02:	99 1f       	adc	r25, r25
     d04:	f1 cf       	rjmp	.-30     	; 0xce8 <__fp_splitA+0xc>
     d06:	86 95       	lsr	r24
     d08:	71 05       	cpc	r23, r1
     d0a:	61 05       	cpc	r22, r1
     d0c:	08 94       	sec
     d0e:	08 95       	ret

00000d10 <__fp_zero>:
     d10:	e8 94       	clt

00000d12 <__fp_szero>:
     d12:	bb 27       	eor	r27, r27
     d14:	66 27       	eor	r22, r22
     d16:	77 27       	eor	r23, r23
     d18:	cb 01       	movw	r24, r22
     d1a:	97 f9       	bld	r25, 7
     d1c:	08 95       	ret

00000d1e <__mulsf3>:
     d1e:	0e 94 a2 06 	call	0xd44	; 0xd44 <__mulsf3x>
     d22:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_round>
     d26:	0e 94 47 06 	call	0xc8e	; 0xc8e <__fp_pscA>
     d2a:	38 f0       	brcs	.+14     	; 0xd3a <__mulsf3+0x1c>
     d2c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__fp_pscB>
     d30:	20 f0       	brcs	.+8      	; 0xd3a <__mulsf3+0x1c>
     d32:	95 23       	and	r25, r21
     d34:	11 f0       	breq	.+4      	; 0xd3a <__mulsf3+0x1c>
     d36:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_inf>
     d3a:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__fp_nan>
     d3e:	11 24       	eor	r1, r1
     d40:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_szero>

00000d44 <__mulsf3x>:
     d44:	0e 94 66 06 	call	0xccc	; 0xccc <__fp_split3>
     d48:	70 f3       	brcs	.-36     	; 0xd26 <__mulsf3+0x8>

00000d4a <__mulsf3_pse>:
     d4a:	95 9f       	mul	r25, r21
     d4c:	c1 f3       	breq	.-16     	; 0xd3e <__mulsf3+0x20>
     d4e:	95 0f       	add	r25, r21
     d50:	50 e0       	ldi	r21, 0x00	; 0
     d52:	55 1f       	adc	r21, r21
     d54:	62 9f       	mul	r22, r18
     d56:	f0 01       	movw	r30, r0
     d58:	72 9f       	mul	r23, r18
     d5a:	bb 27       	eor	r27, r27
     d5c:	f0 0d       	add	r31, r0
     d5e:	b1 1d       	adc	r27, r1
     d60:	63 9f       	mul	r22, r19
     d62:	aa 27       	eor	r26, r26
     d64:	f0 0d       	add	r31, r0
     d66:	b1 1d       	adc	r27, r1
     d68:	aa 1f       	adc	r26, r26
     d6a:	64 9f       	mul	r22, r20
     d6c:	66 27       	eor	r22, r22
     d6e:	b0 0d       	add	r27, r0
     d70:	a1 1d       	adc	r26, r1
     d72:	66 1f       	adc	r22, r22
     d74:	82 9f       	mul	r24, r18
     d76:	22 27       	eor	r18, r18
     d78:	b0 0d       	add	r27, r0
     d7a:	a1 1d       	adc	r26, r1
     d7c:	62 1f       	adc	r22, r18
     d7e:	73 9f       	mul	r23, r19
     d80:	b0 0d       	add	r27, r0
     d82:	a1 1d       	adc	r26, r1
     d84:	62 1f       	adc	r22, r18
     d86:	83 9f       	mul	r24, r19
     d88:	a0 0d       	add	r26, r0
     d8a:	61 1d       	adc	r22, r1
     d8c:	22 1f       	adc	r18, r18
     d8e:	74 9f       	mul	r23, r20
     d90:	33 27       	eor	r19, r19
     d92:	a0 0d       	add	r26, r0
     d94:	61 1d       	adc	r22, r1
     d96:	23 1f       	adc	r18, r19
     d98:	84 9f       	mul	r24, r20
     d9a:	60 0d       	add	r22, r0
     d9c:	21 1d       	adc	r18, r1
     d9e:	82 2f       	mov	r24, r18
     da0:	76 2f       	mov	r23, r22
     da2:	6a 2f       	mov	r22, r26
     da4:	11 24       	eor	r1, r1
     da6:	9f 57       	subi	r25, 0x7F	; 127
     da8:	50 40       	sbci	r21, 0x00	; 0
     daa:	9a f0       	brmi	.+38     	; 0xdd2 <__mulsf3_pse+0x88>
     dac:	f1 f0       	breq	.+60     	; 0xdea <__mulsf3_pse+0xa0>
     dae:	88 23       	and	r24, r24
     db0:	4a f0       	brmi	.+18     	; 0xdc4 <__mulsf3_pse+0x7a>
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	bb 1f       	adc	r27, r27
     db8:	66 1f       	adc	r22, r22
     dba:	77 1f       	adc	r23, r23
     dbc:	88 1f       	adc	r24, r24
     dbe:	91 50       	subi	r25, 0x01	; 1
     dc0:	50 40       	sbci	r21, 0x00	; 0
     dc2:	a9 f7       	brne	.-22     	; 0xdae <__mulsf3_pse+0x64>
     dc4:	9e 3f       	cpi	r25, 0xFE	; 254
     dc6:	51 05       	cpc	r21, r1
     dc8:	80 f0       	brcs	.+32     	; 0xdea <__mulsf3_pse+0xa0>
     dca:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_inf>
     dce:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_szero>
     dd2:	5f 3f       	cpi	r21, 0xFF	; 255
     dd4:	e4 f3       	brlt	.-8      	; 0xdce <__mulsf3_pse+0x84>
     dd6:	98 3e       	cpi	r25, 0xE8	; 232
     dd8:	d4 f3       	brlt	.-12     	; 0xdce <__mulsf3_pse+0x84>
     dda:	86 95       	lsr	r24
     ddc:	77 95       	ror	r23
     dde:	67 95       	ror	r22
     de0:	b7 95       	ror	r27
     de2:	f7 95       	ror	r31
     de4:	e7 95       	ror	r30
     de6:	9f 5f       	subi	r25, 0xFF	; 255
     de8:	c1 f7       	brne	.-16     	; 0xdda <__mulsf3_pse+0x90>
     dea:	fe 2b       	or	r31, r30
     dec:	88 0f       	add	r24, r24
     dee:	91 1d       	adc	r25, r1
     df0:	96 95       	lsr	r25
     df2:	87 95       	ror	r24
     df4:	97 f9       	bld	r25, 7
     df6:	08 95       	ret

00000df8 <round>:
     df8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__fp_splitA>
     dfc:	e8 f0       	brcs	.+58     	; 0xe38 <round+0x40>
     dfe:	9e 37       	cpi	r25, 0x7E	; 126
     e00:	e8 f0       	brcs	.+58     	; 0xe3c <round+0x44>
     e02:	96 39       	cpi	r25, 0x96	; 150
     e04:	b8 f4       	brcc	.+46     	; 0xe34 <round+0x3c>
     e06:	9e 38       	cpi	r25, 0x8E	; 142
     e08:	48 f4       	brcc	.+18     	; 0xe1c <round+0x24>
     e0a:	67 2f       	mov	r22, r23
     e0c:	78 2f       	mov	r23, r24
     e0e:	88 27       	eor	r24, r24
     e10:	98 5f       	subi	r25, 0xF8	; 248
     e12:	f9 cf       	rjmp	.-14     	; 0xe06 <round+0xe>
     e14:	86 95       	lsr	r24
     e16:	77 95       	ror	r23
     e18:	67 95       	ror	r22
     e1a:	93 95       	inc	r25
     e1c:	95 39       	cpi	r25, 0x95	; 149
     e1e:	d0 f3       	brcs	.-12     	; 0xe14 <round+0x1c>
     e20:	b6 2f       	mov	r27, r22
     e22:	b1 70       	andi	r27, 0x01	; 1
     e24:	6b 0f       	add	r22, r27
     e26:	71 1d       	adc	r23, r1
     e28:	81 1d       	adc	r24, r1
     e2a:	20 f4       	brcc	.+8      	; 0xe34 <round+0x3c>
     e2c:	87 95       	ror	r24
     e2e:	77 95       	ror	r23
     e30:	67 95       	ror	r22
     e32:	93 95       	inc	r25
     e34:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_mintl>
     e38:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_mpack>
     e3c:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__fp_szero>

00000e40 <__fp_mintl>:
     e40:	88 23       	and	r24, r24
     e42:	71 f4       	brne	.+28     	; 0xe60 <__fp_mintl+0x20>
     e44:	77 23       	and	r23, r23
     e46:	21 f0       	breq	.+8      	; 0xe50 <__fp_mintl+0x10>
     e48:	98 50       	subi	r25, 0x08	; 8
     e4a:	87 2b       	or	r24, r23
     e4c:	76 2f       	mov	r23, r22
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <__fp_mintl+0x1e>
     e50:	66 23       	and	r22, r22
     e52:	11 f4       	brne	.+4      	; 0xe58 <__fp_mintl+0x18>
     e54:	99 27       	eor	r25, r25
     e56:	0d c0       	rjmp	.+26     	; 0xe72 <__fp_mintl+0x32>
     e58:	90 51       	subi	r25, 0x10	; 16
     e5a:	86 2b       	or	r24, r22
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	2a f0       	brmi	.+10     	; 0xe6c <__fp_mintl+0x2c>
     e62:	9a 95       	dec	r25
     e64:	66 0f       	add	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	88 1f       	adc	r24, r24
     e6a:	da f7       	brpl	.-10     	; 0xe62 <__fp_mintl+0x22>
     e6c:	88 0f       	add	r24, r24
     e6e:	96 95       	lsr	r25
     e70:	87 95       	ror	r24
     e72:	97 f9       	bld	r25, 7
     e74:	08 95       	ret

00000e76 <__fp_mpack>:
     e76:	9f 3f       	cpi	r25, 0xFF	; 255
     e78:	31 f0       	breq	.+12     	; 0xe86 <__fp_mpack_finite+0xc>

00000e7a <__fp_mpack_finite>:
     e7a:	91 50       	subi	r25, 0x01	; 1
     e7c:	20 f4       	brcc	.+8      	; 0xe86 <__fp_mpack_finite+0xc>
     e7e:	87 95       	ror	r24
     e80:	77 95       	ror	r23
     e82:	67 95       	ror	r22
     e84:	b7 95       	ror	r27
     e86:	88 0f       	add	r24, r24
     e88:	91 1d       	adc	r25, r1
     e8a:	96 95       	lsr	r25
     e8c:	87 95       	ror	r24
     e8e:	97 f9       	bld	r25, 7
     e90:	08 95       	ret

00000e92 <memcpy>:
     e92:	fb 01       	movw	r30, r22
     e94:	dc 01       	movw	r26, r24
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <memcpy+0xa>
     e98:	01 90       	ld	r0, Z+
     e9a:	0d 92       	st	X+, r0
     e9c:	41 50       	subi	r20, 0x01	; 1
     e9e:	50 40       	sbci	r21, 0x00	; 0
     ea0:	d8 f7       	brcc	.-10     	; 0xe98 <memcpy+0x6>
     ea2:	08 95       	ret

00000ea4 <memmove>:
     ea4:	68 17       	cp	r22, r24
     ea6:	79 07       	cpc	r23, r25
     ea8:	68 f4       	brcc	.+26     	; 0xec4 <memmove+0x20>
     eaa:	fb 01       	movw	r30, r22
     eac:	dc 01       	movw	r26, r24
     eae:	e4 0f       	add	r30, r20
     eb0:	f5 1f       	adc	r31, r21
     eb2:	a4 0f       	add	r26, r20
     eb4:	b5 1f       	adc	r27, r21
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <memmove+0x18>
     eb8:	02 90       	ld	r0, -Z
     eba:	0e 92       	st	-X, r0
     ebc:	41 50       	subi	r20, 0x01	; 1
     ebe:	50 40       	sbci	r21, 0x00	; 0
     ec0:	d8 f7       	brcc	.-10     	; 0xeb8 <memmove+0x14>
     ec2:	08 95       	ret
     ec4:	0c 94 49 07 	jmp	0xe92	; 0xe92 <memcpy>

00000ec8 <strncmp>:
     ec8:	fb 01       	movw	r30, r22
     eca:	dc 01       	movw	r26, r24
     ecc:	41 50       	subi	r20, 0x01	; 1
     ece:	50 40       	sbci	r21, 0x00	; 0
     ed0:	30 f0       	brcs	.+12     	; 0xede <strncmp+0x16>
     ed2:	8d 91       	ld	r24, X+
     ed4:	01 90       	ld	r0, Z+
     ed6:	80 19       	sub	r24, r0
     ed8:	19 f4       	brne	.+6      	; 0xee0 <strncmp+0x18>
     eda:	00 20       	and	r0, r0
     edc:	b9 f7       	brne	.-18     	; 0xecc <strncmp+0x4>
     ede:	88 1b       	sub	r24, r24
     ee0:	99 0b       	sbc	r25, r25
     ee2:	08 95       	ret

00000ee4 <strstr>:
     ee4:	fb 01       	movw	r30, r22
     ee6:	51 91       	ld	r21, Z+
     ee8:	55 23       	and	r21, r21
     eea:	a9 f0       	breq	.+42     	; 0xf16 <strstr+0x32>
     eec:	bf 01       	movw	r22, r30
     eee:	dc 01       	movw	r26, r24
     ef0:	4d 91       	ld	r20, X+
     ef2:	45 17       	cp	r20, r21
     ef4:	41 11       	cpse	r20, r1
     ef6:	e1 f7       	brne	.-8      	; 0xef0 <strstr+0xc>
     ef8:	59 f4       	brne	.+22     	; 0xf10 <strstr+0x2c>
     efa:	cd 01       	movw	r24, r26
     efc:	01 90       	ld	r0, Z+
     efe:	00 20       	and	r0, r0
     f00:	49 f0       	breq	.+18     	; 0xf14 <strstr+0x30>
     f02:	4d 91       	ld	r20, X+
     f04:	40 15       	cp	r20, r0
     f06:	41 11       	cpse	r20, r1
     f08:	c9 f3       	breq	.-14     	; 0xefc <strstr+0x18>
     f0a:	fb 01       	movw	r30, r22
     f0c:	41 11       	cpse	r20, r1
     f0e:	ef cf       	rjmp	.-34     	; 0xeee <strstr+0xa>
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	08 95       	ret

00000f18 <sprintf>:
     f18:	ae e0       	ldi	r26, 0x0E	; 14
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e2 e9       	ldi	r30, 0x92	; 146
     f1e:	f7 e0       	ldi	r31, 0x07	; 7
     f20:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__prologue_saves__+0x1c>
     f24:	0d 89       	ldd	r16, Y+21	; 0x15
     f26:	1e 89       	ldd	r17, Y+22	; 0x16
     f28:	86 e0       	ldi	r24, 0x06	; 6
     f2a:	8c 83       	std	Y+4, r24	; 0x04
     f2c:	1a 83       	std	Y+2, r17	; 0x02
     f2e:	09 83       	std	Y+1, r16	; 0x01
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	9f e7       	ldi	r25, 0x7F	; 127
     f34:	9e 83       	std	Y+6, r25	; 0x06
     f36:	8d 83       	std	Y+5, r24	; 0x05
     f38:	ae 01       	movw	r20, r28
     f3a:	47 5e       	subi	r20, 0xE7	; 231
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255
     f3e:	6f 89       	ldd	r22, Y+23	; 0x17
     f40:	78 8d       	ldd	r23, Y+24	; 0x18
     f42:	ce 01       	movw	r24, r28
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	0e 94 ae 07 	call	0xf5c	; 0xf5c <vfprintf>
     f4a:	ef 81       	ldd	r30, Y+7	; 0x07
     f4c:	f8 85       	ldd	r31, Y+8	; 0x08
     f4e:	e0 0f       	add	r30, r16
     f50:	f1 1f       	adc	r31, r17
     f52:	10 82       	st	Z, r1
     f54:	2e 96       	adiw	r28, 0x0e	; 14
     f56:	e4 e0       	ldi	r30, 0x04	; 4
     f58:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__epilogue_restores__+0x1c>

00000f5c <vfprintf>:
     f5c:	ab e0       	ldi	r26, 0x0B	; 11
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e4 eb       	ldi	r30, 0xB4	; 180
     f62:	f7 e0       	ldi	r31, 0x07	; 7
     f64:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__prologue_saves__>
     f68:	6c 01       	movw	r12, r24
     f6a:	7b 01       	movw	r14, r22
     f6c:	8a 01       	movw	r16, r20
     f6e:	fc 01       	movw	r30, r24
     f70:	17 82       	std	Z+7, r1	; 0x07
     f72:	16 82       	std	Z+6, r1	; 0x06
     f74:	83 81       	ldd	r24, Z+3	; 0x03
     f76:	81 ff       	sbrs	r24, 1
     f78:	cc c1       	rjmp	.+920    	; 0x1312 <vfprintf+0x3b6>
     f7a:	ce 01       	movw	r24, r28
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	3c 01       	movw	r6, r24
     f80:	f6 01       	movw	r30, r12
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	f7 01       	movw	r30, r14
     f86:	93 fd       	sbrc	r25, 3
     f88:	85 91       	lpm	r24, Z+
     f8a:	93 ff       	sbrs	r25, 3
     f8c:	81 91       	ld	r24, Z+
     f8e:	7f 01       	movw	r14, r30
     f90:	88 23       	and	r24, r24
     f92:	09 f4       	brne	.+2      	; 0xf96 <vfprintf+0x3a>
     f94:	ba c1       	rjmp	.+884    	; 0x130a <vfprintf+0x3ae>
     f96:	85 32       	cpi	r24, 0x25	; 37
     f98:	39 f4       	brne	.+14     	; 0xfa8 <vfprintf+0x4c>
     f9a:	93 fd       	sbrc	r25, 3
     f9c:	85 91       	lpm	r24, Z+
     f9e:	93 ff       	sbrs	r25, 3
     fa0:	81 91       	ld	r24, Z+
     fa2:	7f 01       	movw	r14, r30
     fa4:	85 32       	cpi	r24, 0x25	; 37
     fa6:	29 f4       	brne	.+10     	; 0xfb2 <vfprintf+0x56>
     fa8:	b6 01       	movw	r22, r12
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
     fb0:	e7 cf       	rjmp	.-50     	; 0xf80 <vfprintf+0x24>
     fb2:	91 2c       	mov	r9, r1
     fb4:	21 2c       	mov	r2, r1
     fb6:	31 2c       	mov	r3, r1
     fb8:	ff e1       	ldi	r31, 0x1F	; 31
     fba:	f3 15       	cp	r31, r3
     fbc:	d8 f0       	brcs	.+54     	; 0xff4 <vfprintf+0x98>
     fbe:	8b 32       	cpi	r24, 0x2B	; 43
     fc0:	79 f0       	breq	.+30     	; 0xfe0 <vfprintf+0x84>
     fc2:	38 f4       	brcc	.+14     	; 0xfd2 <vfprintf+0x76>
     fc4:	80 32       	cpi	r24, 0x20	; 32
     fc6:	79 f0       	breq	.+30     	; 0xfe6 <vfprintf+0x8a>
     fc8:	83 32       	cpi	r24, 0x23	; 35
     fca:	a1 f4       	brne	.+40     	; 0xff4 <vfprintf+0x98>
     fcc:	23 2d       	mov	r18, r3
     fce:	20 61       	ori	r18, 0x10	; 16
     fd0:	1d c0       	rjmp	.+58     	; 0x100c <vfprintf+0xb0>
     fd2:	8d 32       	cpi	r24, 0x2D	; 45
     fd4:	61 f0       	breq	.+24     	; 0xfee <vfprintf+0x92>
     fd6:	80 33       	cpi	r24, 0x30	; 48
     fd8:	69 f4       	brne	.+26     	; 0xff4 <vfprintf+0x98>
     fda:	23 2d       	mov	r18, r3
     fdc:	21 60       	ori	r18, 0x01	; 1
     fde:	16 c0       	rjmp	.+44     	; 0x100c <vfprintf+0xb0>
     fe0:	83 2d       	mov	r24, r3
     fe2:	82 60       	ori	r24, 0x02	; 2
     fe4:	38 2e       	mov	r3, r24
     fe6:	e3 2d       	mov	r30, r3
     fe8:	e4 60       	ori	r30, 0x04	; 4
     fea:	3e 2e       	mov	r3, r30
     fec:	2a c0       	rjmp	.+84     	; 0x1042 <vfprintf+0xe6>
     fee:	f3 2d       	mov	r31, r3
     ff0:	f8 60       	ori	r31, 0x08	; 8
     ff2:	1d c0       	rjmp	.+58     	; 0x102e <vfprintf+0xd2>
     ff4:	37 fc       	sbrc	r3, 7
     ff6:	2d c0       	rjmp	.+90     	; 0x1052 <vfprintf+0xf6>
     ff8:	20 ed       	ldi	r18, 0xD0	; 208
     ffa:	28 0f       	add	r18, r24
     ffc:	2a 30       	cpi	r18, 0x0A	; 10
     ffe:	40 f0       	brcs	.+16     	; 0x1010 <vfprintf+0xb4>
    1000:	8e 32       	cpi	r24, 0x2E	; 46
    1002:	b9 f4       	brne	.+46     	; 0x1032 <vfprintf+0xd6>
    1004:	36 fc       	sbrc	r3, 6
    1006:	81 c1       	rjmp	.+770    	; 0x130a <vfprintf+0x3ae>
    1008:	23 2d       	mov	r18, r3
    100a:	20 64       	ori	r18, 0x40	; 64
    100c:	32 2e       	mov	r3, r18
    100e:	19 c0       	rjmp	.+50     	; 0x1042 <vfprintf+0xe6>
    1010:	36 fe       	sbrs	r3, 6
    1012:	06 c0       	rjmp	.+12     	; 0x1020 <vfprintf+0xc4>
    1014:	8a e0       	ldi	r24, 0x0A	; 10
    1016:	98 9e       	mul	r9, r24
    1018:	20 0d       	add	r18, r0
    101a:	11 24       	eor	r1, r1
    101c:	92 2e       	mov	r9, r18
    101e:	11 c0       	rjmp	.+34     	; 0x1042 <vfprintf+0xe6>
    1020:	ea e0       	ldi	r30, 0x0A	; 10
    1022:	2e 9e       	mul	r2, r30
    1024:	20 0d       	add	r18, r0
    1026:	11 24       	eor	r1, r1
    1028:	22 2e       	mov	r2, r18
    102a:	f3 2d       	mov	r31, r3
    102c:	f0 62       	ori	r31, 0x20	; 32
    102e:	3f 2e       	mov	r3, r31
    1030:	08 c0       	rjmp	.+16     	; 0x1042 <vfprintf+0xe6>
    1032:	8c 36       	cpi	r24, 0x6C	; 108
    1034:	21 f4       	brne	.+8      	; 0x103e <vfprintf+0xe2>
    1036:	83 2d       	mov	r24, r3
    1038:	80 68       	ori	r24, 0x80	; 128
    103a:	38 2e       	mov	r3, r24
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <vfprintf+0xe6>
    103e:	88 36       	cpi	r24, 0x68	; 104
    1040:	41 f4       	brne	.+16     	; 0x1052 <vfprintf+0xf6>
    1042:	f7 01       	movw	r30, r14
    1044:	93 fd       	sbrc	r25, 3
    1046:	85 91       	lpm	r24, Z+
    1048:	93 ff       	sbrs	r25, 3
    104a:	81 91       	ld	r24, Z+
    104c:	7f 01       	movw	r14, r30
    104e:	81 11       	cpse	r24, r1
    1050:	b3 cf       	rjmp	.-154    	; 0xfb8 <vfprintf+0x5c>
    1052:	98 2f       	mov	r25, r24
    1054:	9f 7d       	andi	r25, 0xDF	; 223
    1056:	95 54       	subi	r25, 0x45	; 69
    1058:	93 30       	cpi	r25, 0x03	; 3
    105a:	28 f4       	brcc	.+10     	; 0x1066 <vfprintf+0x10a>
    105c:	0c 5f       	subi	r16, 0xFC	; 252
    105e:	1f 4f       	sbci	r17, 0xFF	; 255
    1060:	9f e3       	ldi	r25, 0x3F	; 63
    1062:	99 83       	std	Y+1, r25	; 0x01
    1064:	0d c0       	rjmp	.+26     	; 0x1080 <vfprintf+0x124>
    1066:	83 36       	cpi	r24, 0x63	; 99
    1068:	31 f0       	breq	.+12     	; 0x1076 <vfprintf+0x11a>
    106a:	83 37       	cpi	r24, 0x73	; 115
    106c:	71 f0       	breq	.+28     	; 0x108a <vfprintf+0x12e>
    106e:	83 35       	cpi	r24, 0x53	; 83
    1070:	09 f0       	breq	.+2      	; 0x1074 <vfprintf+0x118>
    1072:	59 c0       	rjmp	.+178    	; 0x1126 <vfprintf+0x1ca>
    1074:	21 c0       	rjmp	.+66     	; 0x10b8 <vfprintf+0x15c>
    1076:	f8 01       	movw	r30, r16
    1078:	80 81       	ld	r24, Z
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	0e 5f       	subi	r16, 0xFE	; 254
    107e:	1f 4f       	sbci	r17, 0xFF	; 255
    1080:	88 24       	eor	r8, r8
    1082:	83 94       	inc	r8
    1084:	91 2c       	mov	r9, r1
    1086:	53 01       	movw	r10, r6
    1088:	13 c0       	rjmp	.+38     	; 0x10b0 <vfprintf+0x154>
    108a:	28 01       	movw	r4, r16
    108c:	f2 e0       	ldi	r31, 0x02	; 2
    108e:	4f 0e       	add	r4, r31
    1090:	51 1c       	adc	r5, r1
    1092:	f8 01       	movw	r30, r16
    1094:	a0 80       	ld	r10, Z
    1096:	b1 80       	ldd	r11, Z+1	; 0x01
    1098:	36 fe       	sbrs	r3, 6
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <vfprintf+0x146>
    109c:	69 2d       	mov	r22, r9
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <vfprintf+0x14a>
    10a2:	6f ef       	ldi	r22, 0xFF	; 255
    10a4:	7f ef       	ldi	r23, 0xFF	; 255
    10a6:	c5 01       	movw	r24, r10
    10a8:	0e 94 9a 09 	call	0x1334	; 0x1334 <strnlen>
    10ac:	4c 01       	movw	r8, r24
    10ae:	82 01       	movw	r16, r4
    10b0:	f3 2d       	mov	r31, r3
    10b2:	ff 77       	andi	r31, 0x7F	; 127
    10b4:	3f 2e       	mov	r3, r31
    10b6:	16 c0       	rjmp	.+44     	; 0x10e4 <vfprintf+0x188>
    10b8:	28 01       	movw	r4, r16
    10ba:	22 e0       	ldi	r18, 0x02	; 2
    10bc:	42 0e       	add	r4, r18
    10be:	51 1c       	adc	r5, r1
    10c0:	f8 01       	movw	r30, r16
    10c2:	a0 80       	ld	r10, Z
    10c4:	b1 80       	ldd	r11, Z+1	; 0x01
    10c6:	36 fe       	sbrs	r3, 6
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <vfprintf+0x174>
    10ca:	69 2d       	mov	r22, r9
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <vfprintf+0x178>
    10d0:	6f ef       	ldi	r22, 0xFF	; 255
    10d2:	7f ef       	ldi	r23, 0xFF	; 255
    10d4:	c5 01       	movw	r24, r10
    10d6:	0e 94 8f 09 	call	0x131e	; 0x131e <strnlen_P>
    10da:	4c 01       	movw	r8, r24
    10dc:	f3 2d       	mov	r31, r3
    10de:	f0 68       	ori	r31, 0x80	; 128
    10e0:	3f 2e       	mov	r3, r31
    10e2:	82 01       	movw	r16, r4
    10e4:	33 fc       	sbrc	r3, 3
    10e6:	1b c0       	rjmp	.+54     	; 0x111e <vfprintf+0x1c2>
    10e8:	82 2d       	mov	r24, r2
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	88 16       	cp	r8, r24
    10ee:	99 06       	cpc	r9, r25
    10f0:	b0 f4       	brcc	.+44     	; 0x111e <vfprintf+0x1c2>
    10f2:	b6 01       	movw	r22, r12
    10f4:	80 e2       	ldi	r24, 0x20	; 32
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    10fc:	2a 94       	dec	r2
    10fe:	f4 cf       	rjmp	.-24     	; 0x10e8 <vfprintf+0x18c>
    1100:	f5 01       	movw	r30, r10
    1102:	37 fc       	sbrc	r3, 7
    1104:	85 91       	lpm	r24, Z+
    1106:	37 fe       	sbrs	r3, 7
    1108:	81 91       	ld	r24, Z+
    110a:	5f 01       	movw	r10, r30
    110c:	b6 01       	movw	r22, r12
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    1114:	21 10       	cpse	r2, r1
    1116:	2a 94       	dec	r2
    1118:	21 e0       	ldi	r18, 0x01	; 1
    111a:	82 1a       	sub	r8, r18
    111c:	91 08       	sbc	r9, r1
    111e:	81 14       	cp	r8, r1
    1120:	91 04       	cpc	r9, r1
    1122:	71 f7       	brne	.-36     	; 0x1100 <vfprintf+0x1a4>
    1124:	e8 c0       	rjmp	.+464    	; 0x12f6 <vfprintf+0x39a>
    1126:	84 36       	cpi	r24, 0x64	; 100
    1128:	11 f0       	breq	.+4      	; 0x112e <vfprintf+0x1d2>
    112a:	89 36       	cpi	r24, 0x69	; 105
    112c:	41 f5       	brne	.+80     	; 0x117e <vfprintf+0x222>
    112e:	f8 01       	movw	r30, r16
    1130:	37 fe       	sbrs	r3, 7
    1132:	07 c0       	rjmp	.+14     	; 0x1142 <vfprintf+0x1e6>
    1134:	60 81       	ld	r22, Z
    1136:	71 81       	ldd	r23, Z+1	; 0x01
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	93 81       	ldd	r25, Z+3	; 0x03
    113c:	0c 5f       	subi	r16, 0xFC	; 252
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	08 c0       	rjmp	.+16     	; 0x1152 <vfprintf+0x1f6>
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	07 2e       	mov	r0, r23
    1148:	00 0c       	add	r0, r0
    114a:	88 0b       	sbc	r24, r24
    114c:	99 0b       	sbc	r25, r25
    114e:	0e 5f       	subi	r16, 0xFE	; 254
    1150:	1f 4f       	sbci	r17, 0xFF	; 255
    1152:	f3 2d       	mov	r31, r3
    1154:	ff 76       	andi	r31, 0x6F	; 111
    1156:	3f 2e       	mov	r3, r31
    1158:	97 ff       	sbrs	r25, 7
    115a:	09 c0       	rjmp	.+18     	; 0x116e <vfprintf+0x212>
    115c:	90 95       	com	r25
    115e:	80 95       	com	r24
    1160:	70 95       	com	r23
    1162:	61 95       	neg	r22
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	8f 4f       	sbci	r24, 0xFF	; 255
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	f0 68       	ori	r31, 0x80	; 128
    116c:	3f 2e       	mov	r3, r31
    116e:	2a e0       	ldi	r18, 0x0A	; 10
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	a3 01       	movw	r20, r6
    1174:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__ultoa_invert>
    1178:	88 2e       	mov	r8, r24
    117a:	86 18       	sub	r8, r6
    117c:	45 c0       	rjmp	.+138    	; 0x1208 <vfprintf+0x2ac>
    117e:	85 37       	cpi	r24, 0x75	; 117
    1180:	31 f4       	brne	.+12     	; 0x118e <vfprintf+0x232>
    1182:	23 2d       	mov	r18, r3
    1184:	2f 7e       	andi	r18, 0xEF	; 239
    1186:	b2 2e       	mov	r11, r18
    1188:	2a e0       	ldi	r18, 0x0A	; 10
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	25 c0       	rjmp	.+74     	; 0x11d8 <vfprintf+0x27c>
    118e:	93 2d       	mov	r25, r3
    1190:	99 7f       	andi	r25, 0xF9	; 249
    1192:	b9 2e       	mov	r11, r25
    1194:	8f 36       	cpi	r24, 0x6F	; 111
    1196:	c1 f0       	breq	.+48     	; 0x11c8 <vfprintf+0x26c>
    1198:	18 f4       	brcc	.+6      	; 0x11a0 <vfprintf+0x244>
    119a:	88 35       	cpi	r24, 0x58	; 88
    119c:	79 f0       	breq	.+30     	; 0x11bc <vfprintf+0x260>
    119e:	b5 c0       	rjmp	.+362    	; 0x130a <vfprintf+0x3ae>
    11a0:	80 37       	cpi	r24, 0x70	; 112
    11a2:	19 f0       	breq	.+6      	; 0x11aa <vfprintf+0x24e>
    11a4:	88 37       	cpi	r24, 0x78	; 120
    11a6:	21 f0       	breq	.+8      	; 0x11b0 <vfprintf+0x254>
    11a8:	b0 c0       	rjmp	.+352    	; 0x130a <vfprintf+0x3ae>
    11aa:	e9 2f       	mov	r30, r25
    11ac:	e0 61       	ori	r30, 0x10	; 16
    11ae:	be 2e       	mov	r11, r30
    11b0:	b4 fe       	sbrs	r11, 4
    11b2:	0d c0       	rjmp	.+26     	; 0x11ce <vfprintf+0x272>
    11b4:	fb 2d       	mov	r31, r11
    11b6:	f4 60       	ori	r31, 0x04	; 4
    11b8:	bf 2e       	mov	r11, r31
    11ba:	09 c0       	rjmp	.+18     	; 0x11ce <vfprintf+0x272>
    11bc:	34 fe       	sbrs	r3, 4
    11be:	0a c0       	rjmp	.+20     	; 0x11d4 <vfprintf+0x278>
    11c0:	29 2f       	mov	r18, r25
    11c2:	26 60       	ori	r18, 0x06	; 6
    11c4:	b2 2e       	mov	r11, r18
    11c6:	06 c0       	rjmp	.+12     	; 0x11d4 <vfprintf+0x278>
    11c8:	28 e0       	ldi	r18, 0x08	; 8
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	05 c0       	rjmp	.+10     	; 0x11d8 <vfprintf+0x27c>
    11ce:	20 e1       	ldi	r18, 0x10	; 16
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <vfprintf+0x27c>
    11d4:	20 e1       	ldi	r18, 0x10	; 16
    11d6:	32 e0       	ldi	r19, 0x02	; 2
    11d8:	f8 01       	movw	r30, r16
    11da:	b7 fe       	sbrs	r11, 7
    11dc:	07 c0       	rjmp	.+14     	; 0x11ec <vfprintf+0x290>
    11de:	60 81       	ld	r22, Z
    11e0:	71 81       	ldd	r23, Z+1	; 0x01
    11e2:	82 81       	ldd	r24, Z+2	; 0x02
    11e4:	93 81       	ldd	r25, Z+3	; 0x03
    11e6:	0c 5f       	subi	r16, 0xFC	; 252
    11e8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ea:	06 c0       	rjmp	.+12     	; 0x11f8 <vfprintf+0x29c>
    11ec:	60 81       	ld	r22, Z
    11ee:	71 81       	ldd	r23, Z+1	; 0x01
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 5f       	subi	r16, 0xFE	; 254
    11f6:	1f 4f       	sbci	r17, 0xFF	; 255
    11f8:	a3 01       	movw	r20, r6
    11fa:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__ultoa_invert>
    11fe:	88 2e       	mov	r8, r24
    1200:	86 18       	sub	r8, r6
    1202:	fb 2d       	mov	r31, r11
    1204:	ff 77       	andi	r31, 0x7F	; 127
    1206:	3f 2e       	mov	r3, r31
    1208:	36 fe       	sbrs	r3, 6
    120a:	0d c0       	rjmp	.+26     	; 0x1226 <vfprintf+0x2ca>
    120c:	23 2d       	mov	r18, r3
    120e:	2e 7f       	andi	r18, 0xFE	; 254
    1210:	a2 2e       	mov	r10, r18
    1212:	89 14       	cp	r8, r9
    1214:	58 f4       	brcc	.+22     	; 0x122c <vfprintf+0x2d0>
    1216:	34 fe       	sbrs	r3, 4
    1218:	0b c0       	rjmp	.+22     	; 0x1230 <vfprintf+0x2d4>
    121a:	32 fc       	sbrc	r3, 2
    121c:	09 c0       	rjmp	.+18     	; 0x1230 <vfprintf+0x2d4>
    121e:	83 2d       	mov	r24, r3
    1220:	8e 7e       	andi	r24, 0xEE	; 238
    1222:	a8 2e       	mov	r10, r24
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <vfprintf+0x2d4>
    1226:	b8 2c       	mov	r11, r8
    1228:	a3 2c       	mov	r10, r3
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <vfprintf+0x2d6>
    122c:	b8 2c       	mov	r11, r8
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <vfprintf+0x2d6>
    1230:	b9 2c       	mov	r11, r9
    1232:	a4 fe       	sbrs	r10, 4
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <vfprintf+0x2f8>
    1236:	fe 01       	movw	r30, r28
    1238:	e8 0d       	add	r30, r8
    123a:	f1 1d       	adc	r31, r1
    123c:	80 81       	ld	r24, Z
    123e:	80 33       	cpi	r24, 0x30	; 48
    1240:	21 f4       	brne	.+8      	; 0x124a <vfprintf+0x2ee>
    1242:	9a 2d       	mov	r25, r10
    1244:	99 7e       	andi	r25, 0xE9	; 233
    1246:	a9 2e       	mov	r10, r25
    1248:	09 c0       	rjmp	.+18     	; 0x125c <vfprintf+0x300>
    124a:	a2 fe       	sbrs	r10, 2
    124c:	06 c0       	rjmp	.+12     	; 0x125a <vfprintf+0x2fe>
    124e:	b3 94       	inc	r11
    1250:	b3 94       	inc	r11
    1252:	04 c0       	rjmp	.+8      	; 0x125c <vfprintf+0x300>
    1254:	8a 2d       	mov	r24, r10
    1256:	86 78       	andi	r24, 0x86	; 134
    1258:	09 f0       	breq	.+2      	; 0x125c <vfprintf+0x300>
    125a:	b3 94       	inc	r11
    125c:	a3 fc       	sbrc	r10, 3
    125e:	11 c0       	rjmp	.+34     	; 0x1282 <vfprintf+0x326>
    1260:	a0 fe       	sbrs	r10, 0
    1262:	06 c0       	rjmp	.+12     	; 0x1270 <vfprintf+0x314>
    1264:	b2 14       	cp	r11, r2
    1266:	88 f4       	brcc	.+34     	; 0x128a <vfprintf+0x32e>
    1268:	28 0c       	add	r2, r8
    126a:	92 2c       	mov	r9, r2
    126c:	9b 18       	sub	r9, r11
    126e:	0e c0       	rjmp	.+28     	; 0x128c <vfprintf+0x330>
    1270:	b2 14       	cp	r11, r2
    1272:	60 f4       	brcc	.+24     	; 0x128c <vfprintf+0x330>
    1274:	b6 01       	movw	r22, r12
    1276:	80 e2       	ldi	r24, 0x20	; 32
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    127e:	b3 94       	inc	r11
    1280:	f7 cf       	rjmp	.-18     	; 0x1270 <vfprintf+0x314>
    1282:	b2 14       	cp	r11, r2
    1284:	18 f4       	brcc	.+6      	; 0x128c <vfprintf+0x330>
    1286:	2b 18       	sub	r2, r11
    1288:	02 c0       	rjmp	.+4      	; 0x128e <vfprintf+0x332>
    128a:	98 2c       	mov	r9, r8
    128c:	21 2c       	mov	r2, r1
    128e:	a4 fe       	sbrs	r10, 4
    1290:	10 c0       	rjmp	.+32     	; 0x12b2 <vfprintf+0x356>
    1292:	b6 01       	movw	r22, r12
    1294:	80 e3       	ldi	r24, 0x30	; 48
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    129c:	a2 fe       	sbrs	r10, 2
    129e:	17 c0       	rjmp	.+46     	; 0x12ce <vfprintf+0x372>
    12a0:	a1 fc       	sbrc	r10, 1
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <vfprintf+0x34e>
    12a4:	88 e7       	ldi	r24, 0x78	; 120
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <vfprintf+0x352>
    12aa:	88 e5       	ldi	r24, 0x58	; 88
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	b6 01       	movw	r22, r12
    12b0:	0c c0       	rjmp	.+24     	; 0x12ca <vfprintf+0x36e>
    12b2:	8a 2d       	mov	r24, r10
    12b4:	86 78       	andi	r24, 0x86	; 134
    12b6:	59 f0       	breq	.+22     	; 0x12ce <vfprintf+0x372>
    12b8:	a1 fe       	sbrs	r10, 1
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <vfprintf+0x364>
    12bc:	8b e2       	ldi	r24, 0x2B	; 43
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <vfprintf+0x366>
    12c0:	80 e2       	ldi	r24, 0x20	; 32
    12c2:	a7 fc       	sbrc	r10, 7
    12c4:	8d e2       	ldi	r24, 0x2D	; 45
    12c6:	b6 01       	movw	r22, r12
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    12ce:	89 14       	cp	r8, r9
    12d0:	38 f4       	brcc	.+14     	; 0x12e0 <vfprintf+0x384>
    12d2:	b6 01       	movw	r22, r12
    12d4:	80 e3       	ldi	r24, 0x30	; 48
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    12dc:	9a 94       	dec	r9
    12de:	f7 cf       	rjmp	.-18     	; 0x12ce <vfprintf+0x372>
    12e0:	8a 94       	dec	r8
    12e2:	f3 01       	movw	r30, r6
    12e4:	e8 0d       	add	r30, r8
    12e6:	f1 1d       	adc	r31, r1
    12e8:	80 81       	ld	r24, Z
    12ea:	b6 01       	movw	r22, r12
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    12f2:	81 10       	cpse	r8, r1
    12f4:	f5 cf       	rjmp	.-22     	; 0x12e0 <vfprintf+0x384>
    12f6:	22 20       	and	r2, r2
    12f8:	09 f4       	brne	.+2      	; 0x12fc <vfprintf+0x3a0>
    12fa:	42 ce       	rjmp	.-892    	; 0xf80 <vfprintf+0x24>
    12fc:	b6 01       	movw	r22, r12
    12fe:	80 e2       	ldi	r24, 0x20	; 32
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 a5 09 	call	0x134a	; 0x134a <fputc>
    1306:	2a 94       	dec	r2
    1308:	f6 cf       	rjmp	.-20     	; 0x12f6 <vfprintf+0x39a>
    130a:	f6 01       	movw	r30, r12
    130c:	86 81       	ldd	r24, Z+6	; 0x06
    130e:	97 81       	ldd	r25, Z+7	; 0x07
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <vfprintf+0x3ba>
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	9f ef       	ldi	r25, 0xFF	; 255
    1316:	2b 96       	adiw	r28, 0x0b	; 11
    1318:	e2 e1       	ldi	r30, 0x12	; 18
    131a:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__epilogue_restores__>

0000131e <strnlen_P>:
    131e:	fc 01       	movw	r30, r24
    1320:	05 90       	lpm	r0, Z+
    1322:	61 50       	subi	r22, 0x01	; 1
    1324:	70 40       	sbci	r23, 0x00	; 0
    1326:	01 10       	cpse	r0, r1
    1328:	d8 f7       	brcc	.-10     	; 0x1320 <strnlen_P+0x2>
    132a:	80 95       	com	r24
    132c:	90 95       	com	r25
    132e:	8e 0f       	add	r24, r30
    1330:	9f 1f       	adc	r25, r31
    1332:	08 95       	ret

00001334 <strnlen>:
    1334:	fc 01       	movw	r30, r24
    1336:	61 50       	subi	r22, 0x01	; 1
    1338:	70 40       	sbci	r23, 0x00	; 0
    133a:	01 90       	ld	r0, Z+
    133c:	01 10       	cpse	r0, r1
    133e:	d8 f7       	brcc	.-10     	; 0x1336 <strnlen+0x2>
    1340:	80 95       	com	r24
    1342:	90 95       	com	r25
    1344:	8e 0f       	add	r24, r30
    1346:	9f 1f       	adc	r25, r31
    1348:	08 95       	ret

0000134a <fputc>:
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	fb 01       	movw	r30, r22
    1354:	23 81       	ldd	r18, Z+3	; 0x03
    1356:	21 fd       	sbrc	r18, 1
    1358:	03 c0       	rjmp	.+6      	; 0x1360 <fputc+0x16>
    135a:	8f ef       	ldi	r24, 0xFF	; 255
    135c:	9f ef       	ldi	r25, 0xFF	; 255
    135e:	2c c0       	rjmp	.+88     	; 0x13b8 <fputc+0x6e>
    1360:	22 ff       	sbrs	r18, 2
    1362:	16 c0       	rjmp	.+44     	; 0x1390 <fputc+0x46>
    1364:	46 81       	ldd	r20, Z+6	; 0x06
    1366:	57 81       	ldd	r21, Z+7	; 0x07
    1368:	24 81       	ldd	r18, Z+4	; 0x04
    136a:	35 81       	ldd	r19, Z+5	; 0x05
    136c:	42 17       	cp	r20, r18
    136e:	53 07       	cpc	r21, r19
    1370:	44 f4       	brge	.+16     	; 0x1382 <fputc+0x38>
    1372:	a0 81       	ld	r26, Z
    1374:	b1 81       	ldd	r27, Z+1	; 0x01
    1376:	9d 01       	movw	r18, r26
    1378:	2f 5f       	subi	r18, 0xFF	; 255
    137a:	3f 4f       	sbci	r19, 0xFF	; 255
    137c:	31 83       	std	Z+1, r19	; 0x01
    137e:	20 83       	st	Z, r18
    1380:	8c 93       	st	X, r24
    1382:	26 81       	ldd	r18, Z+6	; 0x06
    1384:	37 81       	ldd	r19, Z+7	; 0x07
    1386:	2f 5f       	subi	r18, 0xFF	; 255
    1388:	3f 4f       	sbci	r19, 0xFF	; 255
    138a:	37 83       	std	Z+7, r19	; 0x07
    138c:	26 83       	std	Z+6, r18	; 0x06
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <fputc+0x6e>
    1390:	8b 01       	movw	r16, r22
    1392:	ec 01       	movw	r28, r24
    1394:	fb 01       	movw	r30, r22
    1396:	00 84       	ldd	r0, Z+8	; 0x08
    1398:	f1 85       	ldd	r31, Z+9	; 0x09
    139a:	e0 2d       	mov	r30, r0
    139c:	09 95       	icall
    139e:	89 2b       	or	r24, r25
    13a0:	e1 f6       	brne	.-72     	; 0x135a <fputc+0x10>
    13a2:	d8 01       	movw	r26, r16
    13a4:	16 96       	adiw	r26, 0x06	; 6
    13a6:	8d 91       	ld	r24, X+
    13a8:	9c 91       	ld	r25, X
    13aa:	17 97       	sbiw	r26, 0x07	; 7
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	17 96       	adiw	r26, 0x07	; 7
    13b0:	9c 93       	st	X, r25
    13b2:	8e 93       	st	-X, r24
    13b4:	16 97       	sbiw	r26, 0x06	; 6
    13b6:	ce 01       	movw	r24, r28
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	08 95       	ret

000013c2 <__ultoa_invert>:
    13c2:	fa 01       	movw	r30, r20
    13c4:	aa 27       	eor	r26, r26
    13c6:	28 30       	cpi	r18, 0x08	; 8
    13c8:	51 f1       	breq	.+84     	; 0x141e <__ultoa_invert+0x5c>
    13ca:	20 31       	cpi	r18, 0x10	; 16
    13cc:	81 f1       	breq	.+96     	; 0x142e <__ultoa_invert+0x6c>
    13ce:	e8 94       	clt
    13d0:	6f 93       	push	r22
    13d2:	6e 7f       	andi	r22, 0xFE	; 254
    13d4:	6e 5f       	subi	r22, 0xFE	; 254
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	8f 4f       	sbci	r24, 0xFF	; 255
    13da:	9f 4f       	sbci	r25, 0xFF	; 255
    13dc:	af 4f       	sbci	r26, 0xFF	; 255
    13de:	b1 e0       	ldi	r27, 0x01	; 1
    13e0:	3e d0       	rcall	.+124    	; 0x145e <__ultoa_invert+0x9c>
    13e2:	b4 e0       	ldi	r27, 0x04	; 4
    13e4:	3c d0       	rcall	.+120    	; 0x145e <__ultoa_invert+0x9c>
    13e6:	67 0f       	add	r22, r23
    13e8:	78 1f       	adc	r23, r24
    13ea:	89 1f       	adc	r24, r25
    13ec:	9a 1f       	adc	r25, r26
    13ee:	a1 1d       	adc	r26, r1
    13f0:	68 0f       	add	r22, r24
    13f2:	79 1f       	adc	r23, r25
    13f4:	8a 1f       	adc	r24, r26
    13f6:	91 1d       	adc	r25, r1
    13f8:	a1 1d       	adc	r26, r1
    13fa:	6a 0f       	add	r22, r26
    13fc:	71 1d       	adc	r23, r1
    13fe:	81 1d       	adc	r24, r1
    1400:	91 1d       	adc	r25, r1
    1402:	a1 1d       	adc	r26, r1
    1404:	20 d0       	rcall	.+64     	; 0x1446 <__ultoa_invert+0x84>
    1406:	09 f4       	brne	.+2      	; 0x140a <__ultoa_invert+0x48>
    1408:	68 94       	set
    140a:	3f 91       	pop	r19
    140c:	2a e0       	ldi	r18, 0x0A	; 10
    140e:	26 9f       	mul	r18, r22
    1410:	11 24       	eor	r1, r1
    1412:	30 19       	sub	r19, r0
    1414:	30 5d       	subi	r19, 0xD0	; 208
    1416:	31 93       	st	Z+, r19
    1418:	de f6       	brtc	.-74     	; 0x13d0 <__ultoa_invert+0xe>
    141a:	cf 01       	movw	r24, r30
    141c:	08 95       	ret
    141e:	46 2f       	mov	r20, r22
    1420:	47 70       	andi	r20, 0x07	; 7
    1422:	40 5d       	subi	r20, 0xD0	; 208
    1424:	41 93       	st	Z+, r20
    1426:	b3 e0       	ldi	r27, 0x03	; 3
    1428:	0f d0       	rcall	.+30     	; 0x1448 <__ultoa_invert+0x86>
    142a:	c9 f7       	brne	.-14     	; 0x141e <__ultoa_invert+0x5c>
    142c:	f6 cf       	rjmp	.-20     	; 0x141a <__ultoa_invert+0x58>
    142e:	46 2f       	mov	r20, r22
    1430:	4f 70       	andi	r20, 0x0F	; 15
    1432:	40 5d       	subi	r20, 0xD0	; 208
    1434:	4a 33       	cpi	r20, 0x3A	; 58
    1436:	18 f0       	brcs	.+6      	; 0x143e <__ultoa_invert+0x7c>
    1438:	49 5d       	subi	r20, 0xD9	; 217
    143a:	31 fd       	sbrc	r19, 1
    143c:	40 52       	subi	r20, 0x20	; 32
    143e:	41 93       	st	Z+, r20
    1440:	02 d0       	rcall	.+4      	; 0x1446 <__ultoa_invert+0x84>
    1442:	a9 f7       	brne	.-22     	; 0x142e <__ultoa_invert+0x6c>
    1444:	ea cf       	rjmp	.-44     	; 0x141a <__ultoa_invert+0x58>
    1446:	b4 e0       	ldi	r27, 0x04	; 4
    1448:	a6 95       	lsr	r26
    144a:	97 95       	ror	r25
    144c:	87 95       	ror	r24
    144e:	77 95       	ror	r23
    1450:	67 95       	ror	r22
    1452:	ba 95       	dec	r27
    1454:	c9 f7       	brne	.-14     	; 0x1448 <__ultoa_invert+0x86>
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	61 05       	cpc	r22, r1
    145a:	71 05       	cpc	r23, r1
    145c:	08 95       	ret
    145e:	9b 01       	movw	r18, r22
    1460:	ac 01       	movw	r20, r24
    1462:	0a 2e       	mov	r0, r26
    1464:	06 94       	lsr	r0
    1466:	57 95       	ror	r21
    1468:	47 95       	ror	r20
    146a:	37 95       	ror	r19
    146c:	27 95       	ror	r18
    146e:	ba 95       	dec	r27
    1470:	c9 f7       	brne	.-14     	; 0x1464 <__ultoa_invert+0xa2>
    1472:	62 0f       	add	r22, r18
    1474:	73 1f       	adc	r23, r19
    1476:	84 1f       	adc	r24, r20
    1478:	95 1f       	adc	r25, r21
    147a:	a0 1d       	adc	r26, r0
    147c:	08 95       	ret

0000147e <__prologue_saves__>:
    147e:	2f 92       	push	r2
    1480:	3f 92       	push	r3
    1482:	4f 92       	push	r4
    1484:	5f 92       	push	r5
    1486:	6f 92       	push	r6
    1488:	7f 92       	push	r7
    148a:	8f 92       	push	r8
    148c:	9f 92       	push	r9
    148e:	af 92       	push	r10
    1490:	bf 92       	push	r11
    1492:	cf 92       	push	r12
    1494:	df 92       	push	r13
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	ca 1b       	sub	r28, r26
    14a8:	db 0b       	sbc	r29, r27
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	09 94       	ijmp

000014b6 <__epilogue_restores__>:
    14b6:	2a 88       	ldd	r2, Y+18	; 0x12
    14b8:	39 88       	ldd	r3, Y+17	; 0x11
    14ba:	48 88       	ldd	r4, Y+16	; 0x10
    14bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    14be:	6e 84       	ldd	r6, Y+14	; 0x0e
    14c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    14c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    14c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    14c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    14c8:	b9 84       	ldd	r11, Y+9	; 0x09
    14ca:	c8 84       	ldd	r12, Y+8	; 0x08
    14cc:	df 80       	ldd	r13, Y+7	; 0x07
    14ce:	ee 80       	ldd	r14, Y+6	; 0x06
    14d0:	fd 80       	ldd	r15, Y+5	; 0x05
    14d2:	0c 81       	ldd	r16, Y+4	; 0x04
    14d4:	1b 81       	ldd	r17, Y+3	; 0x03
    14d6:	aa 81       	ldd	r26, Y+2	; 0x02
    14d8:	b9 81       	ldd	r27, Y+1	; 0x01
    14da:	ce 0f       	add	r28, r30
    14dc:	d1 1d       	adc	r29, r1
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	ed 01       	movw	r28, r26
    14ea:	08 95       	ret

000014ec <_exit>:
    14ec:	f8 94       	cli

000014ee <__stop_program>:
    14ee:	ff cf       	rjmp	.-2      	; 0x14ee <__stop_program>
