
Sub_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c3e  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b8  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074f  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c4  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015f  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000281b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  88:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Read>:
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN); 	// Set prescaller to 128 and enable ADC
}

uint16_t ADC_Read(uint8_t ADCChannel)
{
	ADMUX = (ADMUX & 0xF0) | (ADCChannel & 0x0F);			// Select ADC channel with safety mask
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	90 7f       	andi	r25, 0xF0	; 240
  98:	8f 70       	andi	r24, 0x0F	; 15
  9a:	89 2b       	or	r24, r25
  9c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);									// Single conversion mode
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24
	while( ADCSRA & (1<<ADSC) );							// Wait until ADC conversion is complete
  a8:	80 81       	ld	r24, Z
  aa:	86 fd       	sbrc	r24, 6
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <ADC_Read+0x18>
	return (uint16_t)ADC;
  ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  b6:	08 95       	ret

000000b8 <Buzzer_Init>:
#include "Buzzer.h"

void Buzzer_Init()
{
	DDRD |= (1 << BUZZER);					// Make buzzer pin an output
  b8:	57 9a       	sbi	0x0a, 7	; 10
  ba:	08 95       	ret

000000bc <nRF_Data_Send>:
#include "DataService.h"

void nRF_Data_Send(){
	// Send moisture and temp to SPI Master
	Read_Temp();
  bc:	0e 94 7c 00 	call	0xf8	; 0xf8 <Read_Temp>
	Read_Moisture();
  c0:	0e 94 8a 00 	call	0x114	; 0x114 <Read_Moisture>
  c4:	08 95       	ret

000000c6 <main>:
#include "Buzzer/Buzzer.h"
#include <util/delay.h>

int main(void)
{
	SPI_Init();
  c6:	0e 94 70 00 	call	0xe0	; 0xe0 <SPI_Init>
	Buzzer_Init();
  ca:	0e 94 5c 00 	call	0xb8	; 0xb8 <Buzzer_Init>
	
	while (1)
	{
		nRF_Data_Send();
  ce:	0e 94 5e 00 	call	0xbc	; 0xbc <nRF_Data_Send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	87 ea       	ldi	r24, 0xA7	; 167
  d4:	91 e6       	ldi	r25, 0x61	; 97
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x10>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x16>
  dc:	00 00       	nop
  de:	f7 cf       	rjmp	.-18     	; 0xce <main+0x8>

000000e0 <SPI_Init>:
#include "SPI_Slave.h"

void SPI_Init(void)
{
	//Set MOSI, SCK, CE and CSN as output
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<CE)|(1<<CSN);
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	86 6a       	ori	r24, 0xA6	; 166
  e4:	84 b9       	out	0x04, r24	; 4
	//Set MISO pin as input
	DDRB &= ~(1<<MISO);
  e6:	26 98       	cbi	0x04, 6	; 4
	//Enable SPI in master mode with Focs/16 =>>>> WRONG SUB UNIT IS A SLAVE
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  e8:	81 e5       	ldi	r24, 0x51	; 81
  ea:	8c bd       	out	0x2c, r24	; 44
	//Disable speed doubler
	SPSR &= ~(1<<SPI2X);
  ec:	8d b5       	in	r24, 0x2d	; 45
  ee:	8e 7f       	andi	r24, 0xFE	; 254
  f0:	8d bd       	out	0x2d, r24	; 45
	//Set CSN HIGH to start, nothing to be sent to nRF yet
	PORTB |= (1<<PB2);
  f2:	2a 9a       	sbi	0x05, 2	; 5
	//Set CE low to start, nothing to send/receive
	PORTB &= ~(1<<PB1);
  f4:	29 98       	cbi	0x05, 1	; 5
  f6:	08 95       	ret

000000f8 <Read_Temp>:
#include "Sensors.h"

void Read_Temp(){
	int temp = (int)ADC_Read(5);
  f8:	85 e0       	ldi	r24, 0x05	; 5
  fa:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Read>
	if((temp>0) && (temp<1024)){
  fe:	9c 01       	movw	r18, r24
 100:	21 50       	subi	r18, 0x01	; 1
 102:	31 09       	sbc	r19, r1
 104:	2f 3f       	cpi	r18, 0xFF	; 255
 106:	33 40       	sbci	r19, 0x03	; 3
 108:	20 f4       	brcc	.+8      	; 0x112 <Read_Temp+0x1a>
		Temparature = temp;
 10a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <Temparature+0x1>
 10e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Temparature>
 112:	08 95       	ret

00000114 <Read_Moisture>:
	}
}

void Read_Moisture(){
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	c0 e0       	ldi	r28, 0x00	; 0
	int sum = 0;
	int count = 0; 
 120:	00 e0       	ldi	r16, 0x00	; 0
 122:	10 e0       	ldi	r17, 0x00	; 0
		Temparature = temp;
	}
}

void Read_Moisture(){
	int sum = 0;
 124:	e1 2c       	mov	r14, r1
 126:	f1 2c       	mov	r15, r1
	int count = 0; 
	
	for(int i = 0; i < NUM_MOISTURE_S; i++){
		int temp = (double)ADC_Read(i);
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Read>
		if((temp>0) && (temp<1024)){
 12e:	9c 01       	movw	r18, r24
 130:	21 50       	subi	r18, 0x01	; 1
 132:	31 09       	sbc	r19, r1
 134:	2f 3f       	cpi	r18, 0xFF	; 255
 136:	33 40       	sbci	r19, 0x03	; 3
 138:	20 f4       	brcc	.+8      	; 0x142 <Read_Moisture+0x2e>
			sum = sum + temp;
 13a:	e8 0e       	add	r14, r24
 13c:	f9 1e       	adc	r15, r25
			count = count + 1;
 13e:	0f 5f       	subi	r16, 0xFF	; 255
 140:	1f 4f       	sbci	r17, 0xFF	; 255
 142:	cf 5f       	subi	r28, 0xFF	; 255

void Read_Moisture(){
	int sum = 0;
	int count = 0; 
	
	for(int i = 0; i < NUM_MOISTURE_S; i++){
 144:	c5 30       	cpi	r28, 0x05	; 5
 146:	81 f7       	brne	.-32     	; 0x128 <Read_Moisture+0x14>
		if((temp>0) && (temp<1024)){
			sum = sum + temp;
			count = count + 1;
		}
	}
	Moisture = sum / count;
 148:	c7 01       	movw	r24, r14
 14a:	b8 01       	movw	r22, r16
 14c:	0e 94 b2 00 	call	0x164	; 0x164 <__divmodhi4>
 150:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 154:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	08 95       	ret

00000164 <__divmodhi4>:
 164:	97 fb       	bst	r25, 7
 166:	07 2e       	mov	r0, r23
 168:	16 f4       	brtc	.+4      	; 0x16e <__divmodhi4+0xa>
 16a:	00 94       	com	r0
 16c:	07 d0       	rcall	.+14     	; 0x17c <__divmodhi4_neg1>
 16e:	77 fd       	sbrc	r23, 7
 170:	09 d0       	rcall	.+18     	; 0x184 <__divmodhi4_neg2>
 172:	0e 94 c6 00 	call	0x18c	; 0x18c <__udivmodhi4>
 176:	07 fc       	sbrc	r0, 7
 178:	05 d0       	rcall	.+10     	; 0x184 <__divmodhi4_neg2>
 17a:	3e f4       	brtc	.+14     	; 0x18a <__divmodhi4_exit>

0000017c <__divmodhi4_neg1>:
 17c:	90 95       	com	r25
 17e:	81 95       	neg	r24
 180:	9f 4f       	sbci	r25, 0xFF	; 255
 182:	08 95       	ret

00000184 <__divmodhi4_neg2>:
 184:	70 95       	com	r23
 186:	61 95       	neg	r22
 188:	7f 4f       	sbci	r23, 0xFF	; 255

0000018a <__divmodhi4_exit>:
 18a:	08 95       	ret

0000018c <__udivmodhi4>:
 18c:	aa 1b       	sub	r26, r26
 18e:	bb 1b       	sub	r27, r27
 190:	51 e1       	ldi	r21, 0x11	; 17
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <__udivmodhi4_ep>

00000194 <__udivmodhi4_loop>:
 194:	aa 1f       	adc	r26, r26
 196:	bb 1f       	adc	r27, r27
 198:	a6 17       	cp	r26, r22
 19a:	b7 07       	cpc	r27, r23
 19c:	10 f0       	brcs	.+4      	; 0x1a2 <__udivmodhi4_ep>
 19e:	a6 1b       	sub	r26, r22
 1a0:	b7 0b       	sbc	r27, r23

000001a2 <__udivmodhi4_ep>:
 1a2:	88 1f       	adc	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	5a 95       	dec	r21
 1a8:	a9 f7       	brne	.-22     	; 0x194 <__udivmodhi4_loop>
 1aa:	80 95       	com	r24
 1ac:	90 95       	com	r25
 1ae:	bc 01       	movw	r22, r24
 1b0:	cd 01       	movw	r24, r26
 1b2:	08 95       	ret

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
