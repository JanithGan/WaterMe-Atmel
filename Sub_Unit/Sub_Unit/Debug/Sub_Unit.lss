
Sub_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e44  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000889  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d6  00000000  00000000  00001919  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000469  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000051b  00000000  00000000  0000243d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "NRF/nRF24L01.h"
#include <util/delay.h>

int main(void)
{
	SPI_Init();
  90:	0e 94 6e 00 	call	0xdc	; 0xdc <SPI_Init>
	DDRD = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a b9       	out	0x0a, r24	; 10
	
	while (1)
	{
		if (GetReg(STATUS)==0x0E)
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	0e 94 55 00 	call	0xaa	; 0xaa <GetReg>
  9e:	8e 30       	cpi	r24, 0x0E	; 14
  a0:	11 f4       	brne	.+4      	; 0xa6 <main+0x16>
		{
			PORTD |= (1<<0);
  a2:	58 9a       	sbi	0x0b, 0	; 11
  a4:	f9 cf       	rjmp	.-14     	; 0x98 <main+0x8>
		}
		else
		{
			PORTD |= (1<<1);
  a6:	59 9a       	sbi	0x0b, 1	; 11
  a8:	f7 cf       	rjmp	.-18     	; 0x98 <main+0x8>

000000aa <GetReg>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	9a 95       	dec	r25
  ae:	f1 f7       	brne	.-4      	; 0xac <GetReg+0x2>
  b0:	00 00       	nop
// Reading registers in nRF
uint8_t GetReg(uint8_t reg)
{
	_delay_us(10);
	//Set CSN LOW, nRF starts to listen for command
	PORTB &= ~(1<<PB2);
  b2:	2a 98       	cbi	0x05, 2	; 5
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	9a 95       	dec	r25
  b8:	f1 f7       	brne	.-4      	; 0xb6 <GetReg+0xc>
  ba:	00 00       	nop
	_delay_us(10);
	//R_REGISTER = set the nRF to reading mode
	WriteByteSPI(R_REGISTER | (REGISTER_MASK & reg));
  bc:	8f 71       	andi	r24, 0x1F	; 31
  be:	0e 94 7a 00 	call	0xf4	; 0xf4 <WriteByteSPI>
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <GetReg+0x1a>
  c8:	00 00       	nop
	//PORTD |= (1<<0);
	_delay_us(10);
	//Send the dummy byte once to receive back the first byte in reg
	uint8_t ret;
	ret = WriteByteSPI(NOP);
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	0e 94 7a 00 	call	0xf4	; 0xf4 <WriteByteSPI>
  d0:	93 e0       	ldi	r25, 0x03	; 3
  d2:	9a 95       	dec	r25
  d4:	f1 f7       	brne	.-4      	; 0xd2 <GetReg+0x28>
  d6:	00 00       	nop
	//PORTD |= (1<<1);
	_delay_us(10);
	//Set CSN HIGH
	PORTB |= (1<<PB2);
  d8:	2a 9a       	sbi	0x05, 2	; 5
	//PORTD &= ~(1<<0);
	//Return the read register
	return ret;
}
  da:	08 95       	ret

000000dc <SPI_Init>:
#include "SPI_Slave.h"

void SPI_Init(void)
{
	//Set MOSI, SCK, CE and CSN as output
	DDRB |= (1<<MOSI)|(1<<SCK)|(1<<CE)|(1<<CSN);
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	86 6a       	ori	r24, 0xA6	; 166
  e0:	84 b9       	out	0x04, r24	; 4
	//Set MISO pin as input
	DDRB &= ~(1<<MISO);
  e2:	26 98       	cbi	0x04, 6	; 4
	//Enable SPI in master mode with Focs/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  e4:	81 e5       	ldi	r24, 0x51	; 81
  e6:	8c bd       	out	0x2c, r24	; 44
	//Disable speed doubler
	SPSR &= ~(1<<SPI2X);
  e8:	8d b5       	in	r24, 0x2d	; 45
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	8d bd       	out	0x2d, r24	; 45
	//Set CSN HIGH to start, nothing to be sent to nRF yet
	PORTB |= (1<<PB2);
  ee:	2a 9a       	sbi	0x05, 2	; 5
	//Set CE low to start, nothing to send/receive
	PORTB &= ~(1<<PB1);
  f0:	29 98       	cbi	0x05, 1	; 5
  f2:	08 95       	ret

000000f4 <WriteByteSPI>:

char WriteByteSPI(unsigned char cData)
{
	char flash_buffer;
	//Load byte to Data register
	SPDR = cData;
  f4:	8e bd       	out	0x2e, r24	; 46
	//Wait for the transmission to complete
	while(!(SPSR & (1<<SPIF)));
  f6:	0d b4       	in	r0, 0x2d	; 45
  f8:	07 fe       	sbrs	r0, 7
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <WriteByteSPI+0x2>
	//Return what's received from the nRF
	flash_buffer = SPDR;
  fc:	8e b5       	in	r24, 0x2e	; 46
	return SPDR;
  fe:	8e b5       	in	r24, 0x2e	; 46
 100:	08 95       	ret

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
