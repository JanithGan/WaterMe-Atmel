
Sub_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000a9c  00000b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800112  00800112  00000b42  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b1d  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d58  00000000  00000000  000028fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f2f  00000000  00000000  00003655  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  00004584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079a  00000000  00000000  000049e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb0  00000000  00000000  00005182  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00005d32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  9e:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
#include "ADC.h"

void ADC_Init()
{
	ADMUX |= (1<<REFS0);									// Select V ref=AVcc
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN); 	// Set prescaller to 128 and enable ADC
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 68       	ori	r24, 0x87	; 135
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <ADC_Read>:
}

uint16_t ADC_Read(uint8_t ADCChannel)
{
	ADMUX = (ADMUX & 0xF0) | (ADCChannel & 0x0F);			// Select ADC channel with safety mask
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	89 2b       	or	r24, r25
  c8:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);									// Single conversion mode
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
	while( ADCSRA & (1<<ADSC) );							// Wait until ADC conversion is complete
  d4:	80 81       	ld	r24, Z
  d6:	86 fd       	sbrc	r24, 6
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <ADC_Read+0x18>
	return (uint16_t)ADC;
  da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e2:	08 95       	ret

000000e4 <Buzzer_Init>:
#include "Buzzer.h"

void Buzzer_Init()
{
	DDRD |= (1 << BUZZER);					// Make buzzer pin an output
  e4:	53 9a       	sbi	0x0a, 3	; 10
  e6:	08 95       	ret

000000e8 <ADC_test>:

#include <util/delay.h>
#include <string.h>
#include <stdio.h>

void ADC_test(){
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	2a 97       	sbiw	r28, 0x0a	; 10
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
	Read_Temp();
 100:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <Read_Temp>
	Read_Moisture();
 104:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <Read_Moisture>
	
	char _buff[10];
	memset(_buff, 0, 10);
 108:	8e 01       	movw	r16, r28
 10a:	0f 5f       	subi	r16, 0xFF	; 255
 10c:	1f 4f       	sbci	r17, 0xFF	; 255
 10e:	8a e0       	ldi	r24, 0x0A	; 10
 110:	f8 01       	movw	r30, r16
 112:	11 92       	st	Z+, r1
 114:	8a 95       	dec	r24
 116:	e9 f7       	brne	.-6      	; 0x112 <ADC_test+0x2a>
	sprintf(_buff, "%d %d \n", Temparature, Moisture);
 118:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 11c:	1f 92       	push	r1
 11e:	8f 93       	push	r24
 120:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Temparature>
 124:	1f 92       	push	r1
 126:	8f 93       	push	r24
 128:	8a e0       	ldi	r24, 0x0A	; 10
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	9f 93       	push	r25
 12e:	8f 93       	push	r24
 130:	1f 93       	push	r17
 132:	0f 93       	push	r16
 134:	0e 94 62 02 	call	0x4c4	; 0x4c4 <sprintf>
	USART_SendString(_buff);
 138:	c8 01       	movw	r24, r16
 13a:	0e 94 2b 02 	call	0x456	; 0x456 <USART_SendString>
}
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	2a 96       	adiw	r28, 0x0a	; 10
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <main>:

int main(void)
{
	Radio_Setup();
 15e:	0e 94 b4 01 	call	0x368	; 0x368 <Radio_Setup>
	Buzzer_Init();
 162:	0e 94 72 00 	call	0xe4	; 0xe4 <Buzzer_Init>
	ADC_Init();
 166:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	
	while (1)
	{
		// nRF_Data_Send();
		ADC_test();
 16a:	0e 94 74 00 	call	0xe8	; 0xe8 <ADC_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	87 ea       	ldi	r24, 0xA7	; 167
 170:	91 e6       	ldi	r25, 0x61	; 97
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0x14>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x1a>
 178:	00 00       	nop
 17a:	f7 cf       	rjmp	.-18     	; 0x16a <main+0xc>

0000017c <nrf24_init>:
{
	uint8_t rv;
	nrf24_readRegister(OBSERVE_TX,&rv,1);
	rv = rv & 0x0F;
	return rv;
}
 17c:	0e 94 c3 01 	call	0x386	; 0x386 <nrf24_setupPins>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 c9 01 	call	0x392	; 0x392 <nrf24_ce_digitalWrite>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	0e 94 cf 01 	call	0x39e	; 0x39e <nrf24_csn_digitalWrite>
 18c:	08 95       	ret

0000018e <spi_transfer>:
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	e8 2e       	mov	r14, r24
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <nrf24_sck_digitalWrite>
 1a0:	c7 e0       	ldi	r28, 0x07	; 7
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	f1 2c       	mov	r15, r1
 1a8:	97 01       	movw	r18, r14
 1aa:	0c 2e       	mov	r0, r28
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <spi_transfer+0x24>
 1ae:	35 95       	asr	r19
 1b0:	27 95       	ror	r18
 1b2:	0a 94       	dec	r0
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <spi_transfer+0x20>
 1b6:	20 ff       	sbrs	r18, 0
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <spi_transfer+0x34>
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 db 01 	call	0x3b6	; 0x3b6 <nrf24_mosi_digitalWrite>
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <spi_transfer+0x3a>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <nrf24_mosi_digitalWrite>
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 d5 01 	call	0x3aa	; 0x3aa <nrf24_sck_digitalWrite>
 1ce:	11 0f       	add	r17, r17
 1d0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <nrf24_miso_digitalRead>
 1d4:	81 11       	cpse	r24, r1
 1d6:	11 60       	ori	r17, 0x01	; 1
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 d5 01 	call	0x3aa	; 0x3aa <nrf24_sck_digitalWrite>
 1de:	21 97       	sbiw	r28, 0x01	; 1
 1e0:	18 f7       	brcc	.-58     	; 0x1a8 <spi_transfer+0x1a>
 1e2:	81 2f       	mov	r24, r17
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <nrf24_transmitSync>:
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	66 23       	and	r22, r22
 1fa:	71 f0       	breq	.+28     	; 0x218 <nrf24_transmitSync+0x28>
 1fc:	ec 01       	movw	r28, r24
 1fe:	61 50       	subi	r22, 0x01	; 1
 200:	06 2f       	mov	r16, r22
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	0f 5f       	subi	r16, 0xFF	; 255
 206:	1f 4f       	sbci	r17, 0xFF	; 255
 208:	08 0f       	add	r16, r24
 20a:	19 1f       	adc	r17, r25
 20c:	89 91       	ld	r24, Y+
 20e:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transfer>
 212:	c0 17       	cp	r28, r16
 214:	d1 07       	cpc	r29, r17
 216:	d1 f7       	brne	.-12     	; 0x20c <nrf24_transmitSync+0x1c>
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	08 95       	ret

00000222 <nrf24_configRegister>:
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	c8 2f       	mov	r28, r24
 228:	d6 2f       	mov	r29, r22
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 cf 01 	call	0x39e	; 0x39e <nrf24_csn_digitalWrite>
 230:	8c 2f       	mov	r24, r28
 232:	8f 71       	andi	r24, 0x1F	; 31
 234:	80 62       	ori	r24, 0x20	; 32
 236:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transfer>
 23a:	8d 2f       	mov	r24, r29
 23c:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transfer>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 cf 01 	call	0x39e	; 0x39e <nrf24_csn_digitalWrite>
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <nrf24_powerUpRx>:
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 cf 01 	call	0x39e	; 0x39e <nrf24_csn_digitalWrite>
 252:	82 ee       	ldi	r24, 0xE2	; 226
 254:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transfer>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 cf 01 	call	0x39e	; 0x39e <nrf24_csn_digitalWrite>
 25e:	60 e7       	ldi	r22, 0x70	; 112
 260:	87 e0       	ldi	r24, 0x07	; 7
 262:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 c9 01 	call	0x392	; 0x392 <nrf24_ce_digitalWrite>
 26c:	6b e0       	ldi	r22, 0x0B	; 11
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 c9 01 	call	0x392	; 0x392 <nrf24_ce_digitalWrite>
 27a:	08 95       	ret

0000027c <nrf24_config>:
 27c:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <payload_len>
 280:	68 2f       	mov	r22, r24
 282:	85 e0       	ldi	r24, 0x05	; 5
 284:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	81 e1       	ldi	r24, 0x11	; 17
 28c:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 290:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <payload_len>
 294:	82 e1       	ldi	r24, 0x12	; 18
 296:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	83 e1       	ldi	r24, 0x13	; 19
 29e:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	84 e1       	ldi	r24, 0x14	; 20
 2a6:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	85 e1       	ldi	r24, 0x15	; 21
 2ae:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	86 e1       	ldi	r24, 0x16	; 22
 2b6:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 2ba:	66 e0       	ldi	r22, 0x06	; 6
 2bc:	86 e0       	ldi	r24, 0x06	; 6
 2be:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 2c2:	68 e0       	ldi	r22, 0x08	; 8
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 2ca:	63 e0       	ldi	r22, 0x03	; 3
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 2d2:	63 e0       	ldi	r22, 0x03	; 3
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 2da:	6f e4       	ldi	r22, 0x4F	; 79
 2dc:	84 e0       	ldi	r24, 0x04	; 4
 2de:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	8c e1       	ldi	r24, 0x1C	; 28
 2e6:	0e 94 11 01 	call	0x222	; 0x222 <nrf24_configRegister>
 2ea:	0e 94 26 01 	call	0x24c	; 0x24c <nrf24_powerUpRx>
 2ee:	08 95       	ret

000002f0 <nrf24_writeRegister>:
	nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len)
{
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	c8 2f       	mov	r28, r24
 2fa:	8b 01       	movw	r16, r22
 2fc:	d4 2f       	mov	r29, r20
	nrf24_csn_digitalWrite(LOW);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 cf 01 	call	0x39e	; 0x39e <nrf24_csn_digitalWrite>
	spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 304:	8c 2f       	mov	r24, r28
 306:	8f 71       	andi	r24, 0x1F	; 31
 308:	80 62       	ori	r24, 0x20	; 32
 30a:	0e 94 c7 00 	call	0x18e	; 0x18e <spi_transfer>
	nrf24_transmitSync(value,len);
 30e:	6d 2f       	mov	r22, r29
 310:	c8 01       	movw	r24, r16
 312:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <nrf24_transmitSync>
	nrf24_csn_digitalWrite(HIGH);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 cf 01 	call	0x39e	; 0x39e <nrf24_csn_digitalWrite>
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	08 95       	ret

00000326 <nrf24_rx_address>:
	nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr)
{
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	ec 01       	movw	r28, r24
	nrf24_ce_digitalWrite(LOW);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 c9 01 	call	0x392	; 0x392 <nrf24_ce_digitalWrite>
	nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 332:	45 e0       	ldi	r20, 0x05	; 5
 334:	be 01       	movw	r22, r28
 336:	8b e0       	ldi	r24, 0x0B	; 11
 338:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nrf24_writeRegister>
	nrf24_ce_digitalWrite(HIGH);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 c9 01 	call	0x392	; 0x392 <nrf24_ce_digitalWrite>
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <nrf24_tx_address>:
	return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	ec 01       	movw	r28, r24
	/* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
	nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 34e:	45 e0       	ldi	r20, 0x05	; 5
 350:	bc 01       	movw	r22, r24
 352:	8a e0       	ldi	r24, 0x0A	; 10
 354:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nrf24_writeRegister>
	nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 358:	45 e0       	ldi	r20, 0x05	; 5
 35a:	be 01       	movw	r22, r28
 35c:	80 e1       	ldi	r24, 0x10	; 16
 35e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nrf24_writeRegister>
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <Radio_Setup>:
uint8_t address_Tx[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
uint8_t address_Rx[5] = {0xD7,0xD7,0xD7,0xD7,0xD7};

/* Setup Function */
void Radio_Setup(){
	nrf24_init();
 368:	0e 94 be 00 	call	0x17c	; 0x17c <nrf24_init>
	nrf24_config(2, 2); // Channel and payload size
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_config>
	nrf24_tx_address(address_Tx);
 374:	85 e0       	ldi	r24, 0x05	; 5
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 a4 01 	call	0x348	; 0x348 <nrf24_tx_address>
	nrf24_rx_address(address_Rx);
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 93 01 	call	0x326	; 0x326 <nrf24_rx_address>
 384:	08 95       	ret

00000386 <nrf24_setupPins>:

/* ------------------------------------------------------------------------- */

void nrf24_setupPins()
{
    set_bit(RF_DDR,1); // CE output
 386:	21 9a       	sbi	0x04, 1	; 4
    set_bit(RF_DDR,2); // CSN output
 388:	22 9a       	sbi	0x04, 2	; 4
    set_bit(RF_DDR,5); // SCK output
 38a:	25 9a       	sbi	0x04, 5	; 4
    set_bit(RF_DDR,3); // MOSI output
 38c:	23 9a       	sbi	0x04, 3	; 4
    clr_bit(RF_DDR,4); // MISO input
 38e:	24 98       	cbi	0x04, 4	; 4
 390:	08 95       	ret

00000392 <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
    if(state)
 392:	88 23       	and	r24, r24
 394:	11 f0       	breq	.+4      	; 0x39a <nrf24_ce_digitalWrite+0x8>
    {
        set_bit(RF_PORT,1);
 396:	29 9a       	sbi	0x05, 1	; 5
 398:	08 95       	ret
    }
    else
    {
        clr_bit(RF_PORT,1);
 39a:	29 98       	cbi	0x05, 1	; 5
 39c:	08 95       	ret

0000039e <nrf24_csn_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
    if(state)
 39e:	88 23       	and	r24, r24
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <nrf24_csn_digitalWrite+0x8>
    {
        set_bit(RF_PORT,2);
 3a2:	2a 9a       	sbi	0x05, 2	; 5
 3a4:	08 95       	ret
    }
    else
    {
        clr_bit(RF_PORT,2);
 3a6:	2a 98       	cbi	0x05, 2	; 5
 3a8:	08 95       	ret

000003aa <nrf24_sck_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
    if(state)
 3aa:	88 23       	and	r24, r24
 3ac:	11 f0       	breq	.+4      	; 0x3b2 <nrf24_sck_digitalWrite+0x8>
    {
        set_bit(RF_PORT,5);
 3ae:	2d 9a       	sbi	0x05, 5	; 5
 3b0:	08 95       	ret
    }
    else
    {
        clr_bit(RF_PORT,5);
 3b2:	2d 98       	cbi	0x05, 5	; 5
 3b4:	08 95       	ret

000003b6 <nrf24_mosi_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
    if(state)
 3b6:	88 23       	and	r24, r24
 3b8:	11 f0       	breq	.+4      	; 0x3be <nrf24_mosi_digitalWrite+0x8>
    {
        set_bit(RF_PORT,3);
 3ba:	2b 9a       	sbi	0x05, 3	; 5
 3bc:	08 95       	ret
    }
    else
    {
        clr_bit(RF_PORT,3);
 3be:	2b 98       	cbi	0x05, 3	; 5
 3c0:	08 95       	ret

000003c2 <nrf24_miso_digitalRead>:
    }
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
    return check_bit(RF_PIN,4);
 3c2:	83 b1       	in	r24, 0x03	; 3
}
 3c4:	80 71       	andi	r24, 0x10	; 16
 3c6:	08 95       	ret

000003c8 <Read_Temp>:
#include "Sensors.h"

void Read_Temp(){
	int temp = (int)ADC_Read(5);
 3c8:	85 e0       	ldi	r24, 0x05	; 5
 3ca:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_Read>
	if((temp>0) && (temp<1024)){
 3ce:	9c 01       	movw	r18, r24
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	31 09       	sbc	r19, r1
 3d4:	2f 3f       	cpi	r18, 0xFF	; 255
 3d6:	33 40       	sbci	r19, 0x03	; 3
 3d8:	58 f4       	brcc	.+22     	; 0x3f0 <Read_Temp+0x28>
		Temparature = temp / 4;
 3da:	9c 01       	movw	r18, r24
 3dc:	99 23       	and	r25, r25
 3de:	14 f4       	brge	.+4      	; 0x3e4 <Read_Temp+0x1c>
 3e0:	2d 5f       	subi	r18, 0xFD	; 253
 3e2:	3f 4f       	sbci	r19, 0xFF	; 255
 3e4:	35 95       	asr	r19
 3e6:	27 95       	ror	r18
 3e8:	35 95       	asr	r19
 3ea:	27 95       	ror	r18
 3ec:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <Temparature>
 3f0:	08 95       	ret

000003f2 <Read_Moisture>:
	}
}

void Read_Moisture(){
 3f2:	ef 92       	push	r14
 3f4:	ff 92       	push	r15
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	c0 e0       	ldi	r28, 0x00	; 0
	int sum = 0;
	int count = 0; 
 3fe:	00 e0       	ldi	r16, 0x00	; 0
 400:	10 e0       	ldi	r17, 0x00	; 0
		Temparature = temp / 4;
	}
}

void Read_Moisture(){
	int sum = 0;
 402:	e1 2c       	mov	r14, r1
 404:	f1 2c       	mov	r15, r1
	int count = 0; 
	
	for(int i = 0; i < NUM_MOISTURE_S; i++){
		int temp = (double)ADC_Read(i);
 406:	8c 2f       	mov	r24, r28
 408:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_Read>
		if((temp>0) && (temp<1024)){
 40c:	9c 01       	movw	r18, r24
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	31 09       	sbc	r19, r1
 412:	2f 3f       	cpi	r18, 0xFF	; 255
 414:	33 40       	sbci	r19, 0x03	; 3
 416:	20 f4       	brcc	.+8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			sum = sum + temp;
 418:	e8 0e       	add	r14, r24
 41a:	f9 1e       	adc	r15, r25
			count = count + 1;
 41c:	0f 5f       	subi	r16, 0xFF	; 255
 41e:	1f 4f       	sbci	r17, 0xFF	; 255
 420:	cf 5f       	subi	r28, 0xFF	; 255

void Read_Moisture(){
	int sum = 0;
	int count = 0; 
	
	for(int i = 0; i < NUM_MOISTURE_S; i++){
 422:	c5 30       	cpi	r28, 0x05	; 5
 424:	81 f7       	brne	.-32     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		if((temp>0) && (temp<1024)){
			sum = sum + temp;
			count = count + 1;
		}
	}
	Moisture = sum / (count * 4);
 426:	b8 01       	movw	r22, r16
 428:	66 0f       	add	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	c7 01       	movw	r24, r14
 432:	0e 94 3a 02 	call	0x474	; 0x474 <__divmodhi4>
 436:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <__data_end>
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	ff 90       	pop	r15
 442:	ef 90       	pop	r14
 444:	08 95       	ret

00000446 <USART_TxChar>:
	return(UDR0);									// Get and return received data
}

void USART_TxChar(char data)						// Data transmitting function
{
	UDR0 = data;									// Write data to be transmitting in UDR0
 446:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while (!(UCSR0A & (1<<UDRE0)));					// Wait until data transmit and buffer get empty
 44a:	e0 ec       	ldi	r30, 0xC0	; 192
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	85 ff       	sbrs	r24, 5
 452:	fd cf       	rjmp	.-6      	; 0x44e <USART_TxChar+0x8>
}
 454:	08 95       	ret

00000456 <USART_SendString>:

void USART_SendString(char *str)					// Send string of USART data function
{
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!=0)
 45c:	88 81       	ld	r24, Y
 45e:	88 23       	and	r24, r24
 460:	31 f0       	breq	.+12     	; 0x46e <USART_SendString+0x18>
 462:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						// Send each char of string till the NULL
 464:	0e 94 23 02 	call	0x446	; 0x446 <USART_TxChar>
}

void USART_SendString(char *str)					// Send string of USART data function
{
	int i=0;
	while (str[i]!=0)
 468:	89 91       	ld	r24, Y+
 46a:	81 11       	cpse	r24, r1
 46c:	fb cf       	rjmp	.-10     	; 0x464 <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						// Send each char of string till the NULL
		i++;
	}
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <__divmodhi4>:
 474:	97 fb       	bst	r25, 7
 476:	07 2e       	mov	r0, r23
 478:	16 f4       	brtc	.+4      	; 0x47e <__divmodhi4+0xa>
 47a:	00 94       	com	r0
 47c:	07 d0       	rcall	.+14     	; 0x48c <__divmodhi4_neg1>
 47e:	77 fd       	sbrc	r23, 7
 480:	09 d0       	rcall	.+18     	; 0x494 <__divmodhi4_neg2>
 482:	0e 94 4e 02 	call	0x49c	; 0x49c <__udivmodhi4>
 486:	07 fc       	sbrc	r0, 7
 488:	05 d0       	rcall	.+10     	; 0x494 <__divmodhi4_neg2>
 48a:	3e f4       	brtc	.+14     	; 0x49a <__divmodhi4_exit>

0000048c <__divmodhi4_neg1>:
 48c:	90 95       	com	r25
 48e:	81 95       	neg	r24
 490:	9f 4f       	sbci	r25, 0xFF	; 255
 492:	08 95       	ret

00000494 <__divmodhi4_neg2>:
 494:	70 95       	com	r23
 496:	61 95       	neg	r22
 498:	7f 4f       	sbci	r23, 0xFF	; 255

0000049a <__divmodhi4_exit>:
 49a:	08 95       	ret

0000049c <__udivmodhi4>:
 49c:	aa 1b       	sub	r26, r26
 49e:	bb 1b       	sub	r27, r27
 4a0:	51 e1       	ldi	r21, 0x11	; 17
 4a2:	07 c0       	rjmp	.+14     	; 0x4b2 <__udivmodhi4_ep>

000004a4 <__udivmodhi4_loop>:
 4a4:	aa 1f       	adc	r26, r26
 4a6:	bb 1f       	adc	r27, r27
 4a8:	a6 17       	cp	r26, r22
 4aa:	b7 07       	cpc	r27, r23
 4ac:	10 f0       	brcs	.+4      	; 0x4b2 <__udivmodhi4_ep>
 4ae:	a6 1b       	sub	r26, r22
 4b0:	b7 0b       	sbc	r27, r23

000004b2 <__udivmodhi4_ep>:
 4b2:	88 1f       	adc	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	5a 95       	dec	r21
 4b8:	a9 f7       	brne	.-22     	; 0x4a4 <__udivmodhi4_loop>
 4ba:	80 95       	com	r24
 4bc:	90 95       	com	r25
 4be:	bc 01       	movw	r22, r24
 4c0:	cd 01       	movw	r24, r26
 4c2:	08 95       	ret

000004c4 <sprintf>:
 4c4:	ae e0       	ldi	r26, 0x0E	; 14
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	e8 e6       	ldi	r30, 0x68	; 104
 4ca:	f2 e0       	ldi	r31, 0x02	; 2
 4cc:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__prologue_saves__+0x1c>
 4d0:	0d 89       	ldd	r16, Y+21	; 0x15
 4d2:	1e 89       	ldd	r17, Y+22	; 0x16
 4d4:	86 e0       	ldi	r24, 0x06	; 6
 4d6:	8c 83       	std	Y+4, r24	; 0x04
 4d8:	1a 83       	std	Y+2, r17	; 0x02
 4da:	09 83       	std	Y+1, r16	; 0x01
 4dc:	8f ef       	ldi	r24, 0xFF	; 255
 4de:	9f e7       	ldi	r25, 0x7F	; 127
 4e0:	9e 83       	std	Y+6, r25	; 0x06
 4e2:	8d 83       	std	Y+5, r24	; 0x05
 4e4:	ae 01       	movw	r20, r28
 4e6:	47 5e       	subi	r20, 0xE7	; 231
 4e8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ea:	6f 89       	ldd	r22, Y+23	; 0x17
 4ec:	78 8d       	ldd	r23, Y+24	; 0x18
 4ee:	ce 01       	movw	r24, r28
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	0e 94 84 02 	call	0x508	; 0x508 <vfprintf>
 4f6:	ef 81       	ldd	r30, Y+7	; 0x07
 4f8:	f8 85       	ldd	r31, Y+8	; 0x08
 4fa:	e0 0f       	add	r30, r16
 4fc:	f1 1f       	adc	r31, r17
 4fe:	10 82       	st	Z, r1
 500:	2e 96       	adiw	r28, 0x0e	; 14
 502:	e4 e0       	ldi	r30, 0x04	; 4
 504:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__epilogue_restores__+0x1c>

00000508 <vfprintf>:
 508:	ab e0       	ldi	r26, 0x0B	; 11
 50a:	b0 e0       	ldi	r27, 0x00	; 0
 50c:	ea e8       	ldi	r30, 0x8A	; 138
 50e:	f2 e0       	ldi	r31, 0x02	; 2
 510:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__prologue_saves__>
 514:	6c 01       	movw	r12, r24
 516:	7b 01       	movw	r14, r22
 518:	8a 01       	movw	r16, r20
 51a:	fc 01       	movw	r30, r24
 51c:	17 82       	std	Z+7, r1	; 0x07
 51e:	16 82       	std	Z+6, r1	; 0x06
 520:	83 81       	ldd	r24, Z+3	; 0x03
 522:	81 ff       	sbrs	r24, 1
 524:	cc c1       	rjmp	.+920    	; 0x8be <__DATA_REGION_LENGTH__+0xbe>
 526:	ce 01       	movw	r24, r28
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	3c 01       	movw	r6, r24
 52c:	f6 01       	movw	r30, r12
 52e:	93 81       	ldd	r25, Z+3	; 0x03
 530:	f7 01       	movw	r30, r14
 532:	93 fd       	sbrc	r25, 3
 534:	85 91       	lpm	r24, Z+
 536:	93 ff       	sbrs	r25, 3
 538:	81 91       	ld	r24, Z+
 53a:	7f 01       	movw	r14, r30
 53c:	88 23       	and	r24, r24
 53e:	09 f4       	brne	.+2      	; 0x542 <vfprintf+0x3a>
 540:	ba c1       	rjmp	.+884    	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 542:	85 32       	cpi	r24, 0x25	; 37
 544:	39 f4       	brne	.+14     	; 0x554 <vfprintf+0x4c>
 546:	93 fd       	sbrc	r25, 3
 548:	85 91       	lpm	r24, Z+
 54a:	93 ff       	sbrs	r25, 3
 54c:	81 91       	ld	r24, Z+
 54e:	7f 01       	movw	r14, r30
 550:	85 32       	cpi	r24, 0x25	; 37
 552:	29 f4       	brne	.+10     	; 0x55e <vfprintf+0x56>
 554:	b6 01       	movw	r22, r12
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <fputc>
 55c:	e7 cf       	rjmp	.-50     	; 0x52c <vfprintf+0x24>
 55e:	91 2c       	mov	r9, r1
 560:	21 2c       	mov	r2, r1
 562:	31 2c       	mov	r3, r1
 564:	ff e1       	ldi	r31, 0x1F	; 31
 566:	f3 15       	cp	r31, r3
 568:	d8 f0       	brcs	.+54     	; 0x5a0 <vfprintf+0x98>
 56a:	8b 32       	cpi	r24, 0x2B	; 43
 56c:	79 f0       	breq	.+30     	; 0x58c <vfprintf+0x84>
 56e:	38 f4       	brcc	.+14     	; 0x57e <vfprintf+0x76>
 570:	80 32       	cpi	r24, 0x20	; 32
 572:	79 f0       	breq	.+30     	; 0x592 <vfprintf+0x8a>
 574:	83 32       	cpi	r24, 0x23	; 35
 576:	a1 f4       	brne	.+40     	; 0x5a0 <vfprintf+0x98>
 578:	23 2d       	mov	r18, r3
 57a:	20 61       	ori	r18, 0x10	; 16
 57c:	1d c0       	rjmp	.+58     	; 0x5b8 <vfprintf+0xb0>
 57e:	8d 32       	cpi	r24, 0x2D	; 45
 580:	61 f0       	breq	.+24     	; 0x59a <vfprintf+0x92>
 582:	80 33       	cpi	r24, 0x30	; 48
 584:	69 f4       	brne	.+26     	; 0x5a0 <vfprintf+0x98>
 586:	23 2d       	mov	r18, r3
 588:	21 60       	ori	r18, 0x01	; 1
 58a:	16 c0       	rjmp	.+44     	; 0x5b8 <vfprintf+0xb0>
 58c:	83 2d       	mov	r24, r3
 58e:	82 60       	ori	r24, 0x02	; 2
 590:	38 2e       	mov	r3, r24
 592:	e3 2d       	mov	r30, r3
 594:	e4 60       	ori	r30, 0x04	; 4
 596:	3e 2e       	mov	r3, r30
 598:	2a c0       	rjmp	.+84     	; 0x5ee <vfprintf+0xe6>
 59a:	f3 2d       	mov	r31, r3
 59c:	f8 60       	ori	r31, 0x08	; 8
 59e:	1d c0       	rjmp	.+58     	; 0x5da <vfprintf+0xd2>
 5a0:	37 fc       	sbrc	r3, 7
 5a2:	2d c0       	rjmp	.+90     	; 0x5fe <vfprintf+0xf6>
 5a4:	20 ed       	ldi	r18, 0xD0	; 208
 5a6:	28 0f       	add	r18, r24
 5a8:	2a 30       	cpi	r18, 0x0A	; 10
 5aa:	40 f0       	brcs	.+16     	; 0x5bc <vfprintf+0xb4>
 5ac:	8e 32       	cpi	r24, 0x2E	; 46
 5ae:	b9 f4       	brne	.+46     	; 0x5de <vfprintf+0xd6>
 5b0:	36 fc       	sbrc	r3, 6
 5b2:	81 c1       	rjmp	.+770    	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 5b4:	23 2d       	mov	r18, r3
 5b6:	20 64       	ori	r18, 0x40	; 64
 5b8:	32 2e       	mov	r3, r18
 5ba:	19 c0       	rjmp	.+50     	; 0x5ee <vfprintf+0xe6>
 5bc:	36 fe       	sbrs	r3, 6
 5be:	06 c0       	rjmp	.+12     	; 0x5cc <vfprintf+0xc4>
 5c0:	8a e0       	ldi	r24, 0x0A	; 10
 5c2:	98 9e       	mul	r9, r24
 5c4:	20 0d       	add	r18, r0
 5c6:	11 24       	eor	r1, r1
 5c8:	92 2e       	mov	r9, r18
 5ca:	11 c0       	rjmp	.+34     	; 0x5ee <vfprintf+0xe6>
 5cc:	ea e0       	ldi	r30, 0x0A	; 10
 5ce:	2e 9e       	mul	r2, r30
 5d0:	20 0d       	add	r18, r0
 5d2:	11 24       	eor	r1, r1
 5d4:	22 2e       	mov	r2, r18
 5d6:	f3 2d       	mov	r31, r3
 5d8:	f0 62       	ori	r31, 0x20	; 32
 5da:	3f 2e       	mov	r3, r31
 5dc:	08 c0       	rjmp	.+16     	; 0x5ee <vfprintf+0xe6>
 5de:	8c 36       	cpi	r24, 0x6C	; 108
 5e0:	21 f4       	brne	.+8      	; 0x5ea <vfprintf+0xe2>
 5e2:	83 2d       	mov	r24, r3
 5e4:	80 68       	ori	r24, 0x80	; 128
 5e6:	38 2e       	mov	r3, r24
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <vfprintf+0xe6>
 5ea:	88 36       	cpi	r24, 0x68	; 104
 5ec:	41 f4       	brne	.+16     	; 0x5fe <vfprintf+0xf6>
 5ee:	f7 01       	movw	r30, r14
 5f0:	93 fd       	sbrc	r25, 3
 5f2:	85 91       	lpm	r24, Z+
 5f4:	93 ff       	sbrs	r25, 3
 5f6:	81 91       	ld	r24, Z+
 5f8:	7f 01       	movw	r14, r30
 5fa:	81 11       	cpse	r24, r1
 5fc:	b3 cf       	rjmp	.-154    	; 0x564 <vfprintf+0x5c>
 5fe:	98 2f       	mov	r25, r24
 600:	9f 7d       	andi	r25, 0xDF	; 223
 602:	95 54       	subi	r25, 0x45	; 69
 604:	93 30       	cpi	r25, 0x03	; 3
 606:	28 f4       	brcc	.+10     	; 0x612 <vfprintf+0x10a>
 608:	0c 5f       	subi	r16, 0xFC	; 252
 60a:	1f 4f       	sbci	r17, 0xFF	; 255
 60c:	9f e3       	ldi	r25, 0x3F	; 63
 60e:	99 83       	std	Y+1, r25	; 0x01
 610:	0d c0       	rjmp	.+26     	; 0x62c <vfprintf+0x124>
 612:	83 36       	cpi	r24, 0x63	; 99
 614:	31 f0       	breq	.+12     	; 0x622 <vfprintf+0x11a>
 616:	83 37       	cpi	r24, 0x73	; 115
 618:	71 f0       	breq	.+28     	; 0x636 <vfprintf+0x12e>
 61a:	83 35       	cpi	r24, 0x53	; 83
 61c:	09 f0       	breq	.+2      	; 0x620 <vfprintf+0x118>
 61e:	59 c0       	rjmp	.+178    	; 0x6d2 <vfprintf+0x1ca>
 620:	21 c0       	rjmp	.+66     	; 0x664 <vfprintf+0x15c>
 622:	f8 01       	movw	r30, r16
 624:	80 81       	ld	r24, Z
 626:	89 83       	std	Y+1, r24	; 0x01
 628:	0e 5f       	subi	r16, 0xFE	; 254
 62a:	1f 4f       	sbci	r17, 0xFF	; 255
 62c:	88 24       	eor	r8, r8
 62e:	83 94       	inc	r8
 630:	91 2c       	mov	r9, r1
 632:	53 01       	movw	r10, r6
 634:	13 c0       	rjmp	.+38     	; 0x65c <vfprintf+0x154>
 636:	28 01       	movw	r4, r16
 638:	f2 e0       	ldi	r31, 0x02	; 2
 63a:	4f 0e       	add	r4, r31
 63c:	51 1c       	adc	r5, r1
 63e:	f8 01       	movw	r30, r16
 640:	a0 80       	ld	r10, Z
 642:	b1 80       	ldd	r11, Z+1	; 0x01
 644:	36 fe       	sbrs	r3, 6
 646:	03 c0       	rjmp	.+6      	; 0x64e <vfprintf+0x146>
 648:	69 2d       	mov	r22, r9
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	02 c0       	rjmp	.+4      	; 0x652 <vfprintf+0x14a>
 64e:	6f ef       	ldi	r22, 0xFF	; 255
 650:	7f ef       	ldi	r23, 0xFF	; 255
 652:	c5 01       	movw	r24, r10
 654:	0e 94 70 04 	call	0x8e0	; 0x8e0 <strnlen>
 658:	4c 01       	movw	r8, r24
 65a:	82 01       	movw	r16, r4
 65c:	f3 2d       	mov	r31, r3
 65e:	ff 77       	andi	r31, 0x7F	; 127
 660:	3f 2e       	mov	r3, r31
 662:	16 c0       	rjmp	.+44     	; 0x690 <vfprintf+0x188>
 664:	28 01       	movw	r4, r16
 666:	22 e0       	ldi	r18, 0x02	; 2
 668:	42 0e       	add	r4, r18
 66a:	51 1c       	adc	r5, r1
 66c:	f8 01       	movw	r30, r16
 66e:	a0 80       	ld	r10, Z
 670:	b1 80       	ldd	r11, Z+1	; 0x01
 672:	36 fe       	sbrs	r3, 6
 674:	03 c0       	rjmp	.+6      	; 0x67c <vfprintf+0x174>
 676:	69 2d       	mov	r22, r9
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	02 c0       	rjmp	.+4      	; 0x680 <vfprintf+0x178>
 67c:	6f ef       	ldi	r22, 0xFF	; 255
 67e:	7f ef       	ldi	r23, 0xFF	; 255
 680:	c5 01       	movw	r24, r10
 682:	0e 94 65 04 	call	0x8ca	; 0x8ca <strnlen_P>
 686:	4c 01       	movw	r8, r24
 688:	f3 2d       	mov	r31, r3
 68a:	f0 68       	ori	r31, 0x80	; 128
 68c:	3f 2e       	mov	r3, r31
 68e:	82 01       	movw	r16, r4
 690:	33 fc       	sbrc	r3, 3
 692:	1b c0       	rjmp	.+54     	; 0x6ca <vfprintf+0x1c2>
 694:	82 2d       	mov	r24, r2
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	88 16       	cp	r8, r24
 69a:	99 06       	cpc	r9, r25
 69c:	b0 f4       	brcc	.+44     	; 0x6ca <vfprintf+0x1c2>
 69e:	b6 01       	movw	r22, r12
 6a0:	80 e2       	ldi	r24, 0x20	; 32
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <fputc>
 6a8:	2a 94       	dec	r2
 6aa:	f4 cf       	rjmp	.-24     	; 0x694 <vfprintf+0x18c>
 6ac:	f5 01       	movw	r30, r10
 6ae:	37 fc       	sbrc	r3, 7
 6b0:	85 91       	lpm	r24, Z+
 6b2:	37 fe       	sbrs	r3, 7
 6b4:	81 91       	ld	r24, Z+
 6b6:	5f 01       	movw	r10, r30
 6b8:	b6 01       	movw	r22, r12
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <fputc>
 6c0:	21 10       	cpse	r2, r1
 6c2:	2a 94       	dec	r2
 6c4:	21 e0       	ldi	r18, 0x01	; 1
 6c6:	82 1a       	sub	r8, r18
 6c8:	91 08       	sbc	r9, r1
 6ca:	81 14       	cp	r8, r1
 6cc:	91 04       	cpc	r9, r1
 6ce:	71 f7       	brne	.-36     	; 0x6ac <vfprintf+0x1a4>
 6d0:	e8 c0       	rjmp	.+464    	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 6d2:	84 36       	cpi	r24, 0x64	; 100
 6d4:	11 f0       	breq	.+4      	; 0x6da <vfprintf+0x1d2>
 6d6:	89 36       	cpi	r24, 0x69	; 105
 6d8:	41 f5       	brne	.+80     	; 0x72a <vfprintf+0x222>
 6da:	f8 01       	movw	r30, r16
 6dc:	37 fe       	sbrs	r3, 7
 6de:	07 c0       	rjmp	.+14     	; 0x6ee <vfprintf+0x1e6>
 6e0:	60 81       	ld	r22, Z
 6e2:	71 81       	ldd	r23, Z+1	; 0x01
 6e4:	82 81       	ldd	r24, Z+2	; 0x02
 6e6:	93 81       	ldd	r25, Z+3	; 0x03
 6e8:	0c 5f       	subi	r16, 0xFC	; 252
 6ea:	1f 4f       	sbci	r17, 0xFF	; 255
 6ec:	08 c0       	rjmp	.+16     	; 0x6fe <vfprintf+0x1f6>
 6ee:	60 81       	ld	r22, Z
 6f0:	71 81       	ldd	r23, Z+1	; 0x01
 6f2:	07 2e       	mov	r0, r23
 6f4:	00 0c       	add	r0, r0
 6f6:	88 0b       	sbc	r24, r24
 6f8:	99 0b       	sbc	r25, r25
 6fa:	0e 5f       	subi	r16, 0xFE	; 254
 6fc:	1f 4f       	sbci	r17, 0xFF	; 255
 6fe:	f3 2d       	mov	r31, r3
 700:	ff 76       	andi	r31, 0x6F	; 111
 702:	3f 2e       	mov	r3, r31
 704:	97 ff       	sbrs	r25, 7
 706:	09 c0       	rjmp	.+18     	; 0x71a <vfprintf+0x212>
 708:	90 95       	com	r25
 70a:	80 95       	com	r24
 70c:	70 95       	com	r23
 70e:	61 95       	neg	r22
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	f0 68       	ori	r31, 0x80	; 128
 718:	3f 2e       	mov	r3, r31
 71a:	2a e0       	ldi	r18, 0x0A	; 10
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	a3 01       	movw	r20, r6
 720:	0e 94 b7 04 	call	0x96e	; 0x96e <__ultoa_invert>
 724:	88 2e       	mov	r8, r24
 726:	86 18       	sub	r8, r6
 728:	45 c0       	rjmp	.+138    	; 0x7b4 <vfprintf+0x2ac>
 72a:	85 37       	cpi	r24, 0x75	; 117
 72c:	31 f4       	brne	.+12     	; 0x73a <vfprintf+0x232>
 72e:	23 2d       	mov	r18, r3
 730:	2f 7e       	andi	r18, 0xEF	; 239
 732:	b2 2e       	mov	r11, r18
 734:	2a e0       	ldi	r18, 0x0A	; 10
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	25 c0       	rjmp	.+74     	; 0x784 <vfprintf+0x27c>
 73a:	93 2d       	mov	r25, r3
 73c:	99 7f       	andi	r25, 0xF9	; 249
 73e:	b9 2e       	mov	r11, r25
 740:	8f 36       	cpi	r24, 0x6F	; 111
 742:	c1 f0       	breq	.+48     	; 0x774 <vfprintf+0x26c>
 744:	18 f4       	brcc	.+6      	; 0x74c <vfprintf+0x244>
 746:	88 35       	cpi	r24, 0x58	; 88
 748:	79 f0       	breq	.+30     	; 0x768 <vfprintf+0x260>
 74a:	b5 c0       	rjmp	.+362    	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 74c:	80 37       	cpi	r24, 0x70	; 112
 74e:	19 f0       	breq	.+6      	; 0x756 <vfprintf+0x24e>
 750:	88 37       	cpi	r24, 0x78	; 120
 752:	21 f0       	breq	.+8      	; 0x75c <vfprintf+0x254>
 754:	b0 c0       	rjmp	.+352    	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 756:	e9 2f       	mov	r30, r25
 758:	e0 61       	ori	r30, 0x10	; 16
 75a:	be 2e       	mov	r11, r30
 75c:	b4 fe       	sbrs	r11, 4
 75e:	0d c0       	rjmp	.+26     	; 0x77a <vfprintf+0x272>
 760:	fb 2d       	mov	r31, r11
 762:	f4 60       	ori	r31, 0x04	; 4
 764:	bf 2e       	mov	r11, r31
 766:	09 c0       	rjmp	.+18     	; 0x77a <vfprintf+0x272>
 768:	34 fe       	sbrs	r3, 4
 76a:	0a c0       	rjmp	.+20     	; 0x780 <vfprintf+0x278>
 76c:	29 2f       	mov	r18, r25
 76e:	26 60       	ori	r18, 0x06	; 6
 770:	b2 2e       	mov	r11, r18
 772:	06 c0       	rjmp	.+12     	; 0x780 <vfprintf+0x278>
 774:	28 e0       	ldi	r18, 0x08	; 8
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	05 c0       	rjmp	.+10     	; 0x784 <vfprintf+0x27c>
 77a:	20 e1       	ldi	r18, 0x10	; 16
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	02 c0       	rjmp	.+4      	; 0x784 <vfprintf+0x27c>
 780:	20 e1       	ldi	r18, 0x10	; 16
 782:	32 e0       	ldi	r19, 0x02	; 2
 784:	f8 01       	movw	r30, r16
 786:	b7 fe       	sbrs	r11, 7
 788:	07 c0       	rjmp	.+14     	; 0x798 <vfprintf+0x290>
 78a:	60 81       	ld	r22, Z
 78c:	71 81       	ldd	r23, Z+1	; 0x01
 78e:	82 81       	ldd	r24, Z+2	; 0x02
 790:	93 81       	ldd	r25, Z+3	; 0x03
 792:	0c 5f       	subi	r16, 0xFC	; 252
 794:	1f 4f       	sbci	r17, 0xFF	; 255
 796:	06 c0       	rjmp	.+12     	; 0x7a4 <vfprintf+0x29c>
 798:	60 81       	ld	r22, Z
 79a:	71 81       	ldd	r23, Z+1	; 0x01
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	0e 5f       	subi	r16, 0xFE	; 254
 7a2:	1f 4f       	sbci	r17, 0xFF	; 255
 7a4:	a3 01       	movw	r20, r6
 7a6:	0e 94 b7 04 	call	0x96e	; 0x96e <__ultoa_invert>
 7aa:	88 2e       	mov	r8, r24
 7ac:	86 18       	sub	r8, r6
 7ae:	fb 2d       	mov	r31, r11
 7b0:	ff 77       	andi	r31, 0x7F	; 127
 7b2:	3f 2e       	mov	r3, r31
 7b4:	36 fe       	sbrs	r3, 6
 7b6:	0d c0       	rjmp	.+26     	; 0x7d2 <vfprintf+0x2ca>
 7b8:	23 2d       	mov	r18, r3
 7ba:	2e 7f       	andi	r18, 0xFE	; 254
 7bc:	a2 2e       	mov	r10, r18
 7be:	89 14       	cp	r8, r9
 7c0:	58 f4       	brcc	.+22     	; 0x7d8 <vfprintf+0x2d0>
 7c2:	34 fe       	sbrs	r3, 4
 7c4:	0b c0       	rjmp	.+22     	; 0x7dc <vfprintf+0x2d4>
 7c6:	32 fc       	sbrc	r3, 2
 7c8:	09 c0       	rjmp	.+18     	; 0x7dc <vfprintf+0x2d4>
 7ca:	83 2d       	mov	r24, r3
 7cc:	8e 7e       	andi	r24, 0xEE	; 238
 7ce:	a8 2e       	mov	r10, r24
 7d0:	05 c0       	rjmp	.+10     	; 0x7dc <vfprintf+0x2d4>
 7d2:	b8 2c       	mov	r11, r8
 7d4:	a3 2c       	mov	r10, r3
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x2d6>
 7d8:	b8 2c       	mov	r11, r8
 7da:	01 c0       	rjmp	.+2      	; 0x7de <vfprintf+0x2d6>
 7dc:	b9 2c       	mov	r11, r9
 7de:	a4 fe       	sbrs	r10, 4
 7e0:	0f c0       	rjmp	.+30     	; 0x800 <__DATA_REGION_LENGTH__>
 7e2:	fe 01       	movw	r30, r28
 7e4:	e8 0d       	add	r30, r8
 7e6:	f1 1d       	adc	r31, r1
 7e8:	80 81       	ld	r24, Z
 7ea:	80 33       	cpi	r24, 0x30	; 48
 7ec:	21 f4       	brne	.+8      	; 0x7f6 <vfprintf+0x2ee>
 7ee:	9a 2d       	mov	r25, r10
 7f0:	99 7e       	andi	r25, 0xE9	; 233
 7f2:	a9 2e       	mov	r10, r25
 7f4:	09 c0       	rjmp	.+18     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7f6:	a2 fe       	sbrs	r10, 2
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fa:	b3 94       	inc	r11
 7fc:	b3 94       	inc	r11
 7fe:	04 c0       	rjmp	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 800:	8a 2d       	mov	r24, r10
 802:	86 78       	andi	r24, 0x86	; 134
 804:	09 f0       	breq	.+2      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 806:	b3 94       	inc	r11
 808:	a3 fc       	sbrc	r10, 3
 80a:	11 c0       	rjmp	.+34     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 80c:	a0 fe       	sbrs	r10, 0
 80e:	06 c0       	rjmp	.+12     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 810:	b2 14       	cp	r11, r2
 812:	88 f4       	brcc	.+34     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 814:	28 0c       	add	r2, r8
 816:	92 2c       	mov	r9, r2
 818:	9b 18       	sub	r9, r11
 81a:	0e c0       	rjmp	.+28     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 81c:	b2 14       	cp	r11, r2
 81e:	60 f4       	brcc	.+24     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 820:	b6 01       	movw	r22, r12
 822:	80 e2       	ldi	r24, 0x20	; 32
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <fputc>
 82a:	b3 94       	inc	r11
 82c:	f7 cf       	rjmp	.-18     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 82e:	b2 14       	cp	r11, r2
 830:	18 f4       	brcc	.+6      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 832:	2b 18       	sub	r2, r11
 834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 836:	98 2c       	mov	r9, r8
 838:	21 2c       	mov	r2, r1
 83a:	a4 fe       	sbrs	r10, 4
 83c:	10 c0       	rjmp	.+32     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 83e:	b6 01       	movw	r22, r12
 840:	80 e3       	ldi	r24, 0x30	; 48
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <fputc>
 848:	a2 fe       	sbrs	r10, 2
 84a:	17 c0       	rjmp	.+46     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 84c:	a1 fc       	sbrc	r10, 1
 84e:	03 c0       	rjmp	.+6      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 850:	88 e7       	ldi	r24, 0x78	; 120
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 856:	88 e5       	ldi	r24, 0x58	; 88
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	b6 01       	movw	r22, r12
 85c:	0c c0       	rjmp	.+24     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 85e:	8a 2d       	mov	r24, r10
 860:	86 78       	andi	r24, 0x86	; 134
 862:	59 f0       	breq	.+22     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 864:	a1 fe       	sbrs	r10, 1
 866:	02 c0       	rjmp	.+4      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 868:	8b e2       	ldi	r24, 0x2B	; 43
 86a:	01 c0       	rjmp	.+2      	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 86c:	80 e2       	ldi	r24, 0x20	; 32
 86e:	a7 fc       	sbrc	r10, 7
 870:	8d e2       	ldi	r24, 0x2D	; 45
 872:	b6 01       	movw	r22, r12
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <fputc>
 87a:	89 14       	cp	r8, r9
 87c:	38 f4       	brcc	.+14     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 87e:	b6 01       	movw	r22, r12
 880:	80 e3       	ldi	r24, 0x30	; 48
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <fputc>
 888:	9a 94       	dec	r9
 88a:	f7 cf       	rjmp	.-18     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 88c:	8a 94       	dec	r8
 88e:	f3 01       	movw	r30, r6
 890:	e8 0d       	add	r30, r8
 892:	f1 1d       	adc	r31, r1
 894:	80 81       	ld	r24, Z
 896:	b6 01       	movw	r22, r12
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <fputc>
 89e:	81 10       	cpse	r8, r1
 8a0:	f5 cf       	rjmp	.-22     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 8a2:	22 20       	and	r2, r2
 8a4:	09 f4       	brne	.+2      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a6:	42 ce       	rjmp	.-892    	; 0x52c <vfprintf+0x24>
 8a8:	b6 01       	movw	r22, r12
 8aa:	80 e2       	ldi	r24, 0x20	; 32
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <fputc>
 8b2:	2a 94       	dec	r2
 8b4:	f6 cf       	rjmp	.-20     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 8b6:	f6 01       	movw	r30, r12
 8b8:	86 81       	ldd	r24, Z+6	; 0x06
 8ba:	97 81       	ldd	r25, Z+7	; 0x07
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8be:	8f ef       	ldi	r24, 0xFF	; 255
 8c0:	9f ef       	ldi	r25, 0xFF	; 255
 8c2:	2b 96       	adiw	r28, 0x0b	; 11
 8c4:	e2 e1       	ldi	r30, 0x12	; 18
 8c6:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__epilogue_restores__>

000008ca <strnlen_P>:
 8ca:	fc 01       	movw	r30, r24
 8cc:	05 90       	lpm	r0, Z+
 8ce:	61 50       	subi	r22, 0x01	; 1
 8d0:	70 40       	sbci	r23, 0x00	; 0
 8d2:	01 10       	cpse	r0, r1
 8d4:	d8 f7       	brcc	.-10     	; 0x8cc <strnlen_P+0x2>
 8d6:	80 95       	com	r24
 8d8:	90 95       	com	r25
 8da:	8e 0f       	add	r24, r30
 8dc:	9f 1f       	adc	r25, r31
 8de:	08 95       	ret

000008e0 <strnlen>:
 8e0:	fc 01       	movw	r30, r24
 8e2:	61 50       	subi	r22, 0x01	; 1
 8e4:	70 40       	sbci	r23, 0x00	; 0
 8e6:	01 90       	ld	r0, Z+
 8e8:	01 10       	cpse	r0, r1
 8ea:	d8 f7       	brcc	.-10     	; 0x8e2 <strnlen+0x2>
 8ec:	80 95       	com	r24
 8ee:	90 95       	com	r25
 8f0:	8e 0f       	add	r24, r30
 8f2:	9f 1f       	adc	r25, r31
 8f4:	08 95       	ret

000008f6 <fputc>:
 8f6:	0f 93       	push	r16
 8f8:	1f 93       	push	r17
 8fa:	cf 93       	push	r28
 8fc:	df 93       	push	r29
 8fe:	fb 01       	movw	r30, r22
 900:	23 81       	ldd	r18, Z+3	; 0x03
 902:	21 fd       	sbrc	r18, 1
 904:	03 c0       	rjmp	.+6      	; 0x90c <__stack+0xd>
 906:	8f ef       	ldi	r24, 0xFF	; 255
 908:	9f ef       	ldi	r25, 0xFF	; 255
 90a:	2c c0       	rjmp	.+88     	; 0x964 <__stack+0x65>
 90c:	22 ff       	sbrs	r18, 2
 90e:	16 c0       	rjmp	.+44     	; 0x93c <__stack+0x3d>
 910:	46 81       	ldd	r20, Z+6	; 0x06
 912:	57 81       	ldd	r21, Z+7	; 0x07
 914:	24 81       	ldd	r18, Z+4	; 0x04
 916:	35 81       	ldd	r19, Z+5	; 0x05
 918:	42 17       	cp	r20, r18
 91a:	53 07       	cpc	r21, r19
 91c:	44 f4       	brge	.+16     	; 0x92e <__stack+0x2f>
 91e:	a0 81       	ld	r26, Z
 920:	b1 81       	ldd	r27, Z+1	; 0x01
 922:	9d 01       	movw	r18, r26
 924:	2f 5f       	subi	r18, 0xFF	; 255
 926:	3f 4f       	sbci	r19, 0xFF	; 255
 928:	31 83       	std	Z+1, r19	; 0x01
 92a:	20 83       	st	Z, r18
 92c:	8c 93       	st	X, r24
 92e:	26 81       	ldd	r18, Z+6	; 0x06
 930:	37 81       	ldd	r19, Z+7	; 0x07
 932:	2f 5f       	subi	r18, 0xFF	; 255
 934:	3f 4f       	sbci	r19, 0xFF	; 255
 936:	37 83       	std	Z+7, r19	; 0x07
 938:	26 83       	std	Z+6, r18	; 0x06
 93a:	14 c0       	rjmp	.+40     	; 0x964 <__stack+0x65>
 93c:	8b 01       	movw	r16, r22
 93e:	ec 01       	movw	r28, r24
 940:	fb 01       	movw	r30, r22
 942:	00 84       	ldd	r0, Z+8	; 0x08
 944:	f1 85       	ldd	r31, Z+9	; 0x09
 946:	e0 2d       	mov	r30, r0
 948:	09 95       	icall
 94a:	89 2b       	or	r24, r25
 94c:	e1 f6       	brne	.-72     	; 0x906 <__stack+0x7>
 94e:	d8 01       	movw	r26, r16
 950:	16 96       	adiw	r26, 0x06	; 6
 952:	8d 91       	ld	r24, X+
 954:	9c 91       	ld	r25, X
 956:	17 97       	sbiw	r26, 0x07	; 7
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	17 96       	adiw	r26, 0x07	; 7
 95c:	9c 93       	st	X, r25
 95e:	8e 93       	st	-X, r24
 960:	16 97       	sbiw	r26, 0x06	; 6
 962:	ce 01       	movw	r24, r28
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	1f 91       	pop	r17
 96a:	0f 91       	pop	r16
 96c:	08 95       	ret

0000096e <__ultoa_invert>:
 96e:	fa 01       	movw	r30, r20
 970:	aa 27       	eor	r26, r26
 972:	28 30       	cpi	r18, 0x08	; 8
 974:	51 f1       	breq	.+84     	; 0x9ca <__ultoa_invert+0x5c>
 976:	20 31       	cpi	r18, 0x10	; 16
 978:	81 f1       	breq	.+96     	; 0x9da <__ultoa_invert+0x6c>
 97a:	e8 94       	clt
 97c:	6f 93       	push	r22
 97e:	6e 7f       	andi	r22, 0xFE	; 254
 980:	6e 5f       	subi	r22, 0xFE	; 254
 982:	7f 4f       	sbci	r23, 0xFF	; 255
 984:	8f 4f       	sbci	r24, 0xFF	; 255
 986:	9f 4f       	sbci	r25, 0xFF	; 255
 988:	af 4f       	sbci	r26, 0xFF	; 255
 98a:	b1 e0       	ldi	r27, 0x01	; 1
 98c:	3e d0       	rcall	.+124    	; 0xa0a <__ultoa_invert+0x9c>
 98e:	b4 e0       	ldi	r27, 0x04	; 4
 990:	3c d0       	rcall	.+120    	; 0xa0a <__ultoa_invert+0x9c>
 992:	67 0f       	add	r22, r23
 994:	78 1f       	adc	r23, r24
 996:	89 1f       	adc	r24, r25
 998:	9a 1f       	adc	r25, r26
 99a:	a1 1d       	adc	r26, r1
 99c:	68 0f       	add	r22, r24
 99e:	79 1f       	adc	r23, r25
 9a0:	8a 1f       	adc	r24, r26
 9a2:	91 1d       	adc	r25, r1
 9a4:	a1 1d       	adc	r26, r1
 9a6:	6a 0f       	add	r22, r26
 9a8:	71 1d       	adc	r23, r1
 9aa:	81 1d       	adc	r24, r1
 9ac:	91 1d       	adc	r25, r1
 9ae:	a1 1d       	adc	r26, r1
 9b0:	20 d0       	rcall	.+64     	; 0x9f2 <__ultoa_invert+0x84>
 9b2:	09 f4       	brne	.+2      	; 0x9b6 <__ultoa_invert+0x48>
 9b4:	68 94       	set
 9b6:	3f 91       	pop	r19
 9b8:	2a e0       	ldi	r18, 0x0A	; 10
 9ba:	26 9f       	mul	r18, r22
 9bc:	11 24       	eor	r1, r1
 9be:	30 19       	sub	r19, r0
 9c0:	30 5d       	subi	r19, 0xD0	; 208
 9c2:	31 93       	st	Z+, r19
 9c4:	de f6       	brtc	.-74     	; 0x97c <__ultoa_invert+0xe>
 9c6:	cf 01       	movw	r24, r30
 9c8:	08 95       	ret
 9ca:	46 2f       	mov	r20, r22
 9cc:	47 70       	andi	r20, 0x07	; 7
 9ce:	40 5d       	subi	r20, 0xD0	; 208
 9d0:	41 93       	st	Z+, r20
 9d2:	b3 e0       	ldi	r27, 0x03	; 3
 9d4:	0f d0       	rcall	.+30     	; 0x9f4 <__ultoa_invert+0x86>
 9d6:	c9 f7       	brne	.-14     	; 0x9ca <__ultoa_invert+0x5c>
 9d8:	f6 cf       	rjmp	.-20     	; 0x9c6 <__ultoa_invert+0x58>
 9da:	46 2f       	mov	r20, r22
 9dc:	4f 70       	andi	r20, 0x0F	; 15
 9de:	40 5d       	subi	r20, 0xD0	; 208
 9e0:	4a 33       	cpi	r20, 0x3A	; 58
 9e2:	18 f0       	brcs	.+6      	; 0x9ea <__ultoa_invert+0x7c>
 9e4:	49 5d       	subi	r20, 0xD9	; 217
 9e6:	31 fd       	sbrc	r19, 1
 9e8:	40 52       	subi	r20, 0x20	; 32
 9ea:	41 93       	st	Z+, r20
 9ec:	02 d0       	rcall	.+4      	; 0x9f2 <__ultoa_invert+0x84>
 9ee:	a9 f7       	brne	.-22     	; 0x9da <__ultoa_invert+0x6c>
 9f0:	ea cf       	rjmp	.-44     	; 0x9c6 <__ultoa_invert+0x58>
 9f2:	b4 e0       	ldi	r27, 0x04	; 4
 9f4:	a6 95       	lsr	r26
 9f6:	97 95       	ror	r25
 9f8:	87 95       	ror	r24
 9fa:	77 95       	ror	r23
 9fc:	67 95       	ror	r22
 9fe:	ba 95       	dec	r27
 a00:	c9 f7       	brne	.-14     	; 0x9f4 <__ultoa_invert+0x86>
 a02:	00 97       	sbiw	r24, 0x00	; 0
 a04:	61 05       	cpc	r22, r1
 a06:	71 05       	cpc	r23, r1
 a08:	08 95       	ret
 a0a:	9b 01       	movw	r18, r22
 a0c:	ac 01       	movw	r20, r24
 a0e:	0a 2e       	mov	r0, r26
 a10:	06 94       	lsr	r0
 a12:	57 95       	ror	r21
 a14:	47 95       	ror	r20
 a16:	37 95       	ror	r19
 a18:	27 95       	ror	r18
 a1a:	ba 95       	dec	r27
 a1c:	c9 f7       	brne	.-14     	; 0xa10 <__ultoa_invert+0xa2>
 a1e:	62 0f       	add	r22, r18
 a20:	73 1f       	adc	r23, r19
 a22:	84 1f       	adc	r24, r20
 a24:	95 1f       	adc	r25, r21
 a26:	a0 1d       	adc	r26, r0
 a28:	08 95       	ret

00000a2a <__prologue_saves__>:
 a2a:	2f 92       	push	r2
 a2c:	3f 92       	push	r3
 a2e:	4f 92       	push	r4
 a30:	5f 92       	push	r5
 a32:	6f 92       	push	r6
 a34:	7f 92       	push	r7
 a36:	8f 92       	push	r8
 a38:	9f 92       	push	r9
 a3a:	af 92       	push	r10
 a3c:	bf 92       	push	r11
 a3e:	cf 92       	push	r12
 a40:	df 92       	push	r13
 a42:	ef 92       	push	r14
 a44:	ff 92       	push	r15
 a46:	0f 93       	push	r16
 a48:	1f 93       	push	r17
 a4a:	cf 93       	push	r28
 a4c:	df 93       	push	r29
 a4e:	cd b7       	in	r28, 0x3d	; 61
 a50:	de b7       	in	r29, 0x3e	; 62
 a52:	ca 1b       	sub	r28, r26
 a54:	db 0b       	sbc	r29, r27
 a56:	0f b6       	in	r0, 0x3f	; 63
 a58:	f8 94       	cli
 a5a:	de bf       	out	0x3e, r29	; 62
 a5c:	0f be       	out	0x3f, r0	; 63
 a5e:	cd bf       	out	0x3d, r28	; 61
 a60:	09 94       	ijmp

00000a62 <__epilogue_restores__>:
 a62:	2a 88       	ldd	r2, Y+18	; 0x12
 a64:	39 88       	ldd	r3, Y+17	; 0x11
 a66:	48 88       	ldd	r4, Y+16	; 0x10
 a68:	5f 84       	ldd	r5, Y+15	; 0x0f
 a6a:	6e 84       	ldd	r6, Y+14	; 0x0e
 a6c:	7d 84       	ldd	r7, Y+13	; 0x0d
 a6e:	8c 84       	ldd	r8, Y+12	; 0x0c
 a70:	9b 84       	ldd	r9, Y+11	; 0x0b
 a72:	aa 84       	ldd	r10, Y+10	; 0x0a
 a74:	b9 84       	ldd	r11, Y+9	; 0x09
 a76:	c8 84       	ldd	r12, Y+8	; 0x08
 a78:	df 80       	ldd	r13, Y+7	; 0x07
 a7a:	ee 80       	ldd	r14, Y+6	; 0x06
 a7c:	fd 80       	ldd	r15, Y+5	; 0x05
 a7e:	0c 81       	ldd	r16, Y+4	; 0x04
 a80:	1b 81       	ldd	r17, Y+3	; 0x03
 a82:	aa 81       	ldd	r26, Y+2	; 0x02
 a84:	b9 81       	ldd	r27, Y+1	; 0x01
 a86:	ce 0f       	add	r28, r30
 a88:	d1 1d       	adc	r29, r1
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	f8 94       	cli
 a8e:	de bf       	out	0x3e, r29	; 62
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	cd bf       	out	0x3d, r28	; 61
 a94:	ed 01       	movw	r28, r26
 a96:	08 95       	ret

00000a98 <_exit>:
 a98:	f8 94       	cli

00000a9a <__stop_program>:
 a9a:	ff cf       	rjmp	.-2      	; 0xa9a <__stop_program>
